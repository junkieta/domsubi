{"version":3,"file":"domsubi.umd.js","sources":["../node_modules/typescript-collections/dist/lib/util.js","../node_modules/typescript-collections/dist/lib/arrays.js","../node_modules/typescript-collections/dist/lib/Dictionary.js","../node_modules/typescript-collections/dist/lib/Set.js","../node_modules/typescript-collections/dist/lib/Bag.js","../node_modules/typescript-collections/dist/lib/LinkedList.js","../node_modules/typescript-collections/dist/lib/Queue.js","../node_modules/typescript-collections/dist/lib/BSTreeKV.js","../node_modules/typescript-collections/dist/lib/BSTree.js","../node_modules/typescript-collections/dist/lib/Heap.js","../node_modules/typescript-collections/dist/lib/LinkedDictionary.js","../node_modules/typescript-collections/dist/lib/MultiDictionary.js","../node_modules/typescript-collections/dist/lib/FactoryDictionary.js","../node_modules/typescript-collections/dist/lib/PriorityQueue.js","../node_modules/typescript-collections/dist/lib/Stack.js","../node_modules/typescript-collections/dist/lib/MultiRootTree.js","../node_modules/typescript-collections/dist/lib/index.js","../node_modules/sanctuary-type-identifiers/index.js","../node_modules/sanctuary-type-classes/index.js","../node_modules/sodiumjs/dist/sodium.esm.js","../src/domsubi/jsxmlComponent.ts","../src/domsubi/jsxmlAttr.ts","../src/domsubi/jsxmlAttributes.ts","../src/domsubi/jsxmlNode.ts","../src/domsubi/jsxmlVisitor.ts","../src/domsubi/jshtmlInlineStyleRule.ts","../src/domsubi/jshtmlDataset.ts","../src/domsubi/jshtmlVisitor.ts","../src/domsubi/jsxml.ts","../src/domsubi/jshtml.ts","../src/domsubi/helpers.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nexports.has = function (obj, prop) {\n    return _hasOwnProperty.call(obj, prop);\n};\n/**\n * Default function to compare element order.\n * @function\n */\nfunction defaultCompare(a, b) {\n    if (a < b) {\n        return -1;\n    }\n    else if (a === b) {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nexports.defaultCompare = defaultCompare;\n/**\n * Default function to test equality.\n * @function\n */\nfunction defaultEquals(a, b) {\n    return a === b;\n}\nexports.defaultEquals = defaultEquals;\n/**\n * Default function to convert an object to a string.\n * @function\n */\nfunction defaultToString(item) {\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return '$s' + item;\n    }\n    else {\n        return '$o' + item.toString();\n    }\n}\nexports.defaultToString = defaultToString;\n/**\n * Joins all the properies of the object using the provided join string\n */\nfunction makeString(item, join) {\n    if (join === void 0) { join = ','; }\n    if (item === null) {\n        return 'COLLECTION_NULL';\n    }\n    else if (isUndefined(item)) {\n        return 'COLLECTION_UNDEFINED';\n    }\n    else if (isString(item)) {\n        return item.toString();\n    }\n    else {\n        var toret = '{';\n        var first = true;\n        for (var prop in item) {\n            if (exports.has(item, prop)) {\n                if (first) {\n                    first = false;\n                }\n                else {\n                    toret = toret + join;\n                }\n                toret = toret + prop + ':' + item[prop];\n            }\n        }\n        return toret + '}';\n    }\n}\nexports.makeString = makeString;\n/**\n * Checks if the given argument is a function.\n * @function\n */\nfunction isFunction(func) {\n    return (typeof func) === 'function';\n}\nexports.isFunction = isFunction;\n/**\n * Checks if the given argument is undefined.\n * @function\n */\nfunction isUndefined(obj) {\n    return (typeof obj) === 'undefined';\n}\nexports.isUndefined = isUndefined;\n/**\n * Checks if the given argument is a string.\n * @function\n */\nfunction isString(obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n}\nexports.isString = isString;\n/**\n * Reverses a compare function.\n * @function\n */\nfunction reverseCompareFunction(compareFunction) {\n    if (isUndefined(compareFunction) || !isFunction(compareFunction)) {\n        return function (a, b) {\n            if (a < b) {\n                return 1;\n            }\n            else if (a === b) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        };\n    }\n    else {\n        return function (d, v) {\n            return compareFunction(d, v) * -1;\n        };\n    }\n}\nexports.reverseCompareFunction = reverseCompareFunction;\n/**\n * Returns an equal function given a compare function.\n * @function\n */\nfunction compareToEquals(compareFunction) {\n    return function (a, b) {\n        return compareFunction(a, b) === 0;\n    };\n}\nexports.compareToEquals = compareToEquals;\n//# sourceMappingURL=util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\n/**\n * Returns the position of the first occurrence of the specified item\n * within the specified array.4\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the first occurrence of the specified element\n * within the specified array, or -1 if not found.\n */\nfunction indexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.indexOf = indexOf;\n/**\n * Returns the position of the last occurrence of the specified element\n * within the specified array.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the position of the last occurrence of the specified element\n * within the specified array or -1 if not found.\n */\nfunction lastIndexOf(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    for (var i = length - 1; i >= 0; i--) {\n        if (equals(array[i], item)) {\n            return i;\n        }\n    }\n    return -1;\n}\nexports.lastIndexOf = lastIndexOf;\n/**\n * Returns true if the specified array contains the specified element.\n * @param {*} array the array in which to search the element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the specified array contains the specified element.\n */\nfunction contains(array, item, equalsFunction) {\n    return indexOf(array, item, equalsFunction) >= 0;\n}\nexports.contains = contains;\n/**\n * Removes the first ocurrence of the specified element from the specified array.\n * @param {*} array the array in which to search element.\n * @param {Object} item the element to search.\n * @param {function(Object,Object):boolean=} equalsFunction optional function to\n * check equality between 2 elements.\n * @return {boolean} true if the array changed after this call.\n */\nfunction remove(array, item, equalsFunction) {\n    var index = indexOf(array, item, equalsFunction);\n    if (index < 0) {\n        return false;\n    }\n    array.splice(index, 1);\n    return true;\n}\nexports.remove = remove;\n/**\n * Returns the number of elements in the specified array equal\n * to the specified object.\n * @param {Array} array the array in which to determine the frequency of the element.\n * @param {Object} item the element whose frequency is to be determined.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between 2 elements.\n * @return {number} the number of elements in the specified array\n * equal to the specified object.\n */\nfunction frequency(array, item, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    var length = array.length;\n    var freq = 0;\n    for (var i = 0; i < length; i++) {\n        if (equals(array[i], item)) {\n            freq++;\n        }\n    }\n    return freq;\n}\nexports.frequency = frequency;\n/**\n * Returns true if the two specified arrays are equal to one another.\n * Two arrays are considered equal if both arrays contain the same number\n * of elements, and all corresponding pairs of elements in the two\n * arrays are equal and are in the same order.\n * @param {Array} array1 one array to be tested for equality.\n * @param {Array} array2 the other array to be tested for equality.\n * @param {function(Object,Object):boolean=} equalsFunction optional function used to\n * check equality between elemements in the arrays.\n * @return {boolean} true if the two arrays are equal\n */\nfunction equals(array1, array2, equalsFunction) {\n    var equals = equalsFunction || util.defaultEquals;\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    var length = array1.length;\n    for (var i = 0; i < length; i++) {\n        if (!equals(array1[i], array2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.equals = equals;\n/**\n * Returns shallow a copy of the specified array.\n * @param {*} array the array to copy.\n * @return {Array} a copy of the specified array\n */\nfunction copy(array) {\n    return array.concat();\n}\nexports.copy = copy;\n/**\n * Swaps the elements at the specified positions in the specified array.\n * @param {Array} array The array in which to swap elements.\n * @param {number} i the index of one element to be swapped.\n * @param {number} j the index of the other element to be swapped.\n * @return {boolean} true if the array is defined and the indexes are valid.\n */\nfunction swap(array, i, j) {\n    if (i < 0 || i >= array.length || j < 0 || j >= array.length) {\n        return false;\n    }\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n    return true;\n}\nexports.swap = swap;\nfunction toString(array) {\n    return '[' + array.toString() + ']';\n}\nexports.toString = toString;\n/**\n * Executes the provided function once for each element present in this array\n * starting from index 0 to length - 1.\n * @param {Array} array The array in which to iterate.\n * @param {function(Object):*} callback function to execute, it is\n * invoked with one argument: the element value, to break the iteration you can\n * optionally return false.\n */\nfunction forEach(array, callback) {\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var ele = array_1[_i];\n        if (callback(ele) === false) {\n            return;\n        }\n    }\n}\nexports.forEach = forEach;\n//# sourceMappingURL=arrays.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary = /** @class */ (function () {\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function Dictionary(toStrFunction) {\n        this.table = {};\n        this.nElements = 0;\n        this.toStr = toStrFunction || util.defaultToString;\n    }\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    Dictionary.prototype.getValue = function (key) {\n        var pair = this.table['$' + this.toStr(key)];\n        if (util.isUndefined(pair)) {\n            return undefined;\n        }\n        return pair.value;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    Dictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var ret;\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (util.isUndefined(previousElement)) {\n            this.nElements++;\n            ret = undefined;\n        }\n        else {\n            ret = previousElement.value;\n        }\n        this.table[k] = {\n            key: key,\n            value: value\n        };\n        return ret;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    Dictionary.prototype.remove = function (key) {\n        var k = '$' + this.toStr(key);\n        var previousElement = this.table[k];\n        if (!util.isUndefined(previousElement)) {\n            delete this.table[k];\n            this.nElements--;\n            return previousElement.value;\n        }\n        return undefined;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    Dictionary.prototype.keys = function () {\n        var array = [];\n        for (var name_1 in this.table) {\n            if (util.has(this.table, name_1)) {\n                var pair = this.table[name_1];\n                array.push(pair.key);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    Dictionary.prototype.values = function () {\n        var array = [];\n        for (var name_2 in this.table) {\n            if (util.has(this.table, name_2)) {\n                var pair = this.table[name_2];\n                array.push(pair.value);\n            }\n        }\n        return array;\n    };\n    /**\n     * Executes the provided function once for each key-value pair\n     * present in this dictionary.\n     * @param {function(Object,Object):*} callback function to execute, it is\n     * invoked with two arguments: key and value. To break the iteration you can\n     * optionally return false.\n     */\n    Dictionary.prototype.forEach = function (callback) {\n        for (var name_3 in this.table) {\n            if (util.has(this.table, name_3)) {\n                var pair = this.table[name_3];\n                var ret = callback(pair.key, pair.value);\n                if (ret === false) {\n                    return;\n                }\n            }\n        }\n    };\n    /**\n     * Returns true if this dictionary contains a mapping for the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary contains a mapping for the\n     * specified key.\n     */\n    Dictionary.prototype.containsKey = function (key) {\n        return !util.isUndefined(this.getValue(key));\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     * @this {collections.Dictionary}\n     */\n    Dictionary.prototype.clear = function () {\n        this.table = {};\n        this.nElements = 0;\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    Dictionary.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    Dictionary.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    Dictionary.prototype.toString = function () {\n        var toret = '{';\n        this.forEach(function (k, v) {\n            toret += \"\\n\\t\" + k + \" : \" + v;\n        });\n        return toret + '\\n}';\n    };\n    return Dictionary;\n}()); // End of dictionary\nexports.default = Dictionary;\n//# sourceMappingURL=Dictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar Set = /** @class */ (function () {\n    /**\n     * Creates an empty set.\n     * @class <p>A set is a data structure that contains no duplicate items.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStringFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Set(toStringFunction) {\n        this.dictionary = new Dictionary_1.default(toStringFunction);\n    }\n    /**\n     * Returns true if this set contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this set contains the specified element,\n     * false otherwise.\n     */\n    Set.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Adds the specified element to this set if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this set did not already contain the specified element.\n     */\n    Set.prototype.add = function (element) {\n        if (this.contains(element) || util.isUndefined(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.setValue(element, element);\n            return true;\n        }\n    };\n    /**\n     * Performs an intersection between this and another set.\n     * Removes all values that are not present this set and the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.intersection = function (otherSet) {\n        var set = this;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                set.remove(element);\n            }\n            return true;\n        });\n    };\n    /**\n     * Performs a union between this and another set.\n     * Adds all values from the given set to this set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.union = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.add(element);\n            return true;\n        });\n    };\n    /**\n     * Performs a difference between this and another set.\n     * Removes from this set all the values that are present in the given set.\n     * @param {collections.Set} otherSet other set.\n     */\n    Set.prototype.difference = function (otherSet) {\n        var set = this;\n        otherSet.forEach(function (element) {\n            set.remove(element);\n            return true;\n        });\n    };\n    /**\n     * Checks whether the given set contains all the elements in this set.\n     * @param {collections.Set} otherSet other set.\n     * @return {boolean} true if this set is a subset of the given set.\n     */\n    Set.prototype.isSubsetOf = function (otherSet) {\n        if (this.size() > otherSet.size()) {\n            return false;\n        }\n        var isSub = true;\n        this.forEach(function (element) {\n            if (!otherSet.contains(element)) {\n                isSub = false;\n                return false;\n            }\n            return true;\n        });\n        return isSub;\n    };\n    /**\n     * Removes the specified element from this set if it is present.\n     * @return {boolean} true if this set contained the specified element.\n     */\n    Set.prototype.remove = function (element) {\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            this.dictionary.remove(element);\n            return true;\n        }\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this set.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one arguments: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Set.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            return callback(v);\n        });\n    };\n    /**\n     * Returns an array containing all of the elements in this set in arbitrary order.\n     * @return {Array} an array containing all of the elements in this set.\n     */\n    Set.prototype.toArray = function () {\n        return this.dictionary.values();\n    };\n    /**\n     * Returns true if this set contains no elements.\n     * @return {boolean} true if this set contains no elements.\n     */\n    Set.prototype.isEmpty = function () {\n        return this.dictionary.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this set.\n     * @return {number} the number of elements in this set.\n     */\n    Set.prototype.size = function () {\n        return this.dictionary.size();\n    };\n    /**\n     * Removes all of the elements from this set.\n     */\n    Set.prototype.clear = function () {\n        this.dictionary.clear();\n    };\n    /*\n    * Provides a string representation for display\n    */\n    Set.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    return Set;\n}()); // end of Set\nexports.default = Set;\n//# sourceMappingURL=Set.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar Set_1 = require(\"./Set\");\nvar Bag = /** @class */ (function () {\n    /**\n     * Creates an empty bag.\n     * @class <p>A bag is a special kind of set in which members are\n     * allowed to appear more than once.</p>\n     * <p>If the inserted elements are custom objects a function\n     * which converts elements to unique strings must be provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert elements to strings. If the elements aren't strings or if toString()\n     * is not appropriate, a custom function which receives an object and returns a\n     * unique string must be provided.\n     */\n    function Bag(toStrFunction) {\n        this.toStrF = toStrFunction || util.defaultToString;\n        this.dictionary = new Dictionary_1.default(this.toStrF);\n        this.nElements = 0;\n    }\n    /**\n     * Adds nCopies of the specified object to this bag.\n     * @param {Object} element element to add.\n     * @param {number=} nCopies the number of copies to add, if this argument is\n     * undefined 1 copy is added.\n     * @return {boolean} true unless element is undefined.\n     */\n    Bag.prototype.add = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            var node = {\n                value: element,\n                copies: nCopies\n            };\n            this.dictionary.setValue(element, node);\n        }\n        else {\n            this.dictionary.getValue(element).copies += nCopies;\n        }\n        this.nElements += nCopies;\n        return true;\n    };\n    /**\n     * Counts the number of copies of the specified object in this bag.\n     * @param {Object} element the object to search for..\n     * @return {number} the number of copies of the object, 0 if not found\n     */\n    Bag.prototype.count = function (element) {\n        if (!this.contains(element)) {\n            return 0;\n        }\n        else {\n            return this.dictionary.getValue(element).copies;\n        }\n    };\n    /**\n     * Returns true if this bag contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this bag contains the specified element,\n     * false otherwise.\n     */\n    Bag.prototype.contains = function (element) {\n        return this.dictionary.containsKey(element);\n    };\n    /**\n     * Removes nCopies of the specified object to this bag.\n     * If the number of copies to remove is greater than the actual number\n     * of copies in the Bag, all copies are removed.\n     * @param {Object} element element to remove.\n     * @param {number=} nCopies the number of copies to remove, if this argument is\n     * undefined 1 copy is removed.\n     * @return {boolean} true if at least 1 element was removed.\n     */\n    Bag.prototype.remove = function (element, nCopies) {\n        if (nCopies === void 0) { nCopies = 1; }\n        if (util.isUndefined(element) || nCopies <= 0) {\n            return false;\n        }\n        if (!this.contains(element)) {\n            return false;\n        }\n        else {\n            var node = this.dictionary.getValue(element);\n            if (nCopies > node.copies) {\n                this.nElements -= node.copies;\n            }\n            else {\n                this.nElements -= nCopies;\n            }\n            node.copies -= nCopies;\n            if (node.copies <= 0) {\n                this.dictionary.remove(element);\n            }\n            return true;\n        }\n    };\n    /**\n     * Returns an array containing all of the elements in this big in arbitrary order,\n     * including multiple copies.\n     * @return {Array} an array containing all of the elements in this bag.\n     */\n    Bag.prototype.toArray = function () {\n        var a = [];\n        var values = this.dictionary.values();\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var node = values_1[_i];\n            var element = node.value;\n            var copies = node.copies;\n            for (var j = 0; j < copies; j++) {\n                a.push(element);\n            }\n        }\n        return a;\n    };\n    /**\n     * Returns a set of unique elements in this bag.\n     * @return {collections.Set<T>} a set of unique elements in this bag.\n     */\n    Bag.prototype.toSet = function () {\n        var toret = new Set_1.default(this.toStrF);\n        var elements = this.dictionary.values();\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var ele = elements_1[_i];\n            var value = ele.value;\n            toret.add(value);\n        }\n        return toret;\n    };\n    /**\n     * Executes the provided function once for each element\n     * present in this bag, including multiple copies.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element. To break the iteration you can\n     * optionally return false.\n     */\n    Bag.prototype.forEach = function (callback) {\n        this.dictionary.forEach(function (k, v) {\n            var value = v.value;\n            var copies = v.copies;\n            for (var i = 0; i < copies; i++) {\n                if (callback(value) === false) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    };\n    /**\n     * Returns the number of elements in this bag.\n     * @return {number} the number of elements in this bag.\n     */\n    Bag.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this bag contains no elements.\n     * @return {boolean} true if this bag contains no elements.\n     */\n    Bag.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Removes all of the elements from this bag.\n     */\n    Bag.prototype.clear = function () {\n        this.nElements = 0;\n        this.dictionary.clear();\n    };\n    return Bag;\n}()); // End of bag\nexports.default = Bag;\n//# sourceMappingURL=Bag.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar LinkedList = /** @class */ (function () {\n    /**\n     * Creates an empty Linked List.\n     * @class A linked list is a data structure consisting of a group of nodes\n     * which together represent a sequence.\n     * @constructor\n     */\n    function LinkedList() {\n        /**\n         * First node in the list\n         * @type {Object}\n         * @private\n         */\n        this.firstNode = null;\n        /**\n         * Last node in the list\n         * @type {Object}\n         * @private\n         */\n        this.lastNode = null;\n        /**\n         * Number of elements in the list\n         * @type {number}\n         * @private\n         */\n        this.nElements = 0;\n    }\n    /**\n     * Adds an element to this list.\n     * @param {Object} item element to be added.\n     * @param {number=} index optional index to add the element. If no index is specified\n     * the element is added to the end of this list.\n     * @return {boolean} true if the element was added or false if the index is invalid\n     * or if the element is undefined.\n     */\n    LinkedList.prototype.add = function (item, index) {\n        if (util.isUndefined(index)) {\n            index = this.nElements;\n        }\n        if (index < 0 || index > this.nElements || util.isUndefined(item)) {\n            return false;\n        }\n        var newNode = this.createNode(item);\n        if (this.nElements === 0 || this.lastNode === null) {\n            // First node in the list.\n            this.firstNode = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === this.nElements) {\n            // Insert at the end.\n            this.lastNode.next = newNode;\n            this.lastNode = newNode;\n        }\n        else if (index === 0) {\n            // Change first node.\n            newNode.next = this.firstNode;\n            this.firstNode = newNode;\n        }\n        else {\n            var prev = this.nodeAtIndex(index - 1);\n            if (prev === null) {\n                return false;\n            }\n            newNode.next = prev.next;\n            prev.next = newNode;\n        }\n        this.nElements++;\n        return true;\n    };\n    /**\n     * Returns the first element in this list.\n     * @return {*} the first element of the list or undefined if the list is\n     * empty.\n     */\n    LinkedList.prototype.first = function () {\n        if (this.firstNode !== null) {\n            return this.firstNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the last element in this list.\n     * @return {*} the last element in the list or undefined if the list is\n     * empty.\n     */\n    LinkedList.prototype.last = function () {\n        if (this.lastNode !== null) {\n            return this.lastNode.element;\n        }\n        return undefined;\n    };\n    /**\n     * Returns the element at the specified position in this list.\n     * @param {number} index desired index.\n     * @return {*} the element at the given index or undefined if the index is\n     * out of bounds.\n     */\n    LinkedList.prototype.elementAtIndex = function (index) {\n        var node = this.nodeAtIndex(index);\n        if (node === null) {\n            return undefined;\n        }\n        return node.element;\n    };\n    /**\n     * Returns the index in this list of the first occurrence of the\n     * specified element, or -1 if the List does not contain this element.\n     * <p>If the elements inside this list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {number} the index in this list of the first occurrence\n     * of the specified element, or -1 if this list does not contain the\n     * element.\n     */\n    LinkedList.prototype.indexOf = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (util.isUndefined(item)) {\n            return -1;\n        }\n        var currentNode = this.firstNode;\n        var index = 0;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                return index;\n            }\n            index++;\n            currentNode = currentNode.next;\n        }\n        return -1;\n    };\n    /**\n     * Returns true if this list contains the specified element.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction Optional\n     * function used to check if two elements are equal.\n     * @return {boolean} true if this list contains the specified element, false\n     * otherwise.\n     */\n    LinkedList.prototype.contains = function (item, equalsFunction) {\n        return (this.indexOf(item, equalsFunction) >= 0);\n    };\n    /**\n     * Removes the first occurrence of the specified element in this list.\n     * <p>If the elements inside the list are\n     * not comparable with the === operator a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName = function(pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} item element to be removed from this list, if present.\n     * @return {boolean} true if the list contained the specified element.\n     */\n    LinkedList.prototype.remove = function (item, equalsFunction) {\n        var equalsF = equalsFunction || util.defaultEquals;\n        if (this.nElements < 1 || util.isUndefined(item)) {\n            return false;\n        }\n        var previous = null;\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (equalsF(currentNode.element, item)) {\n                if (previous === null) {\n                    this.firstNode = currentNode.next;\n                    if (currentNode === this.lastNode) {\n                        this.lastNode = null;\n                    }\n                }\n                else if (currentNode === this.lastNode) {\n                    this.lastNode = previous;\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                else {\n                    previous.next = currentNode.next;\n                    currentNode.next = null;\n                }\n                this.nElements--;\n                return true;\n            }\n            previous = currentNode;\n            currentNode = currentNode.next;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this list.\n     */\n    LinkedList.prototype.clear = function () {\n        this.firstNode = null;\n        this.lastNode = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this list is equal to the given list.\n     * Two lists are equal if they have the same elements in the same order.\n     * @param {LinkedList} other the other list.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function used to check if two elements are equal. If the elements in the lists\n     * are custom objects you should provide a function, otherwise\n     * the === operator is used to check equality between elements.\n     * @return {boolean} true if this list is equal to the given list.\n     */\n    LinkedList.prototype.equals = function (other, equalsFunction) {\n        var eqF = equalsFunction || util.defaultEquals;\n        if (!(other instanceof LinkedList)) {\n            return false;\n        }\n        if (this.size() !== other.size()) {\n            return false;\n        }\n        return this.equalsAux(this.firstNode, other.firstNode, eqF);\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.equalsAux = function (n1, n2, eqF) {\n        while (n1 !== null && n2 !== null) {\n            if (!eqF(n1.element, n2.element)) {\n                return false;\n            }\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return true;\n    };\n    /**\n     * Removes the element at the specified position in this list.\n     * @param {number} index given index.\n     * @return {*} removed element or undefined if the index is out of bounds.\n     */\n    LinkedList.prototype.removeElementAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements || this.firstNode === null || this.lastNode === null) {\n            return undefined;\n        }\n        var element;\n        if (this.nElements === 1) {\n            //First node in the list.\n            element = this.firstNode.element;\n            this.firstNode = null;\n            this.lastNode = null;\n        }\n        else {\n            var previous = this.nodeAtIndex(index - 1);\n            if (previous === null) {\n                element = this.firstNode.element;\n                this.firstNode = this.firstNode.next;\n            }\n            else if (previous.next === this.lastNode) {\n                element = this.lastNode.element;\n                this.lastNode = previous;\n            }\n            if (previous !== null && previous.next !== null) {\n                element = previous.next.element;\n                previous.next = previous.next.next;\n            }\n        }\n        this.nElements--;\n        return element;\n    };\n    /**\n     * Executes the provided function once for each element present in this list in order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    LinkedList.prototype.forEach = function (callback) {\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            if (callback(currentNode.element) === false) {\n                break;\n            }\n            currentNode = currentNode.next;\n        }\n    };\n    /**\n     * Reverses the order of the elements in this linked list (makes the last\n     * element first, and the first element last).\n     */\n    LinkedList.prototype.reverse = function () {\n        var previous = null;\n        var current = this.firstNode;\n        var temp = null;\n        while (current !== null) {\n            temp = current.next;\n            current.next = previous;\n            previous = current;\n            current = temp;\n        }\n        temp = this.firstNode;\n        this.firstNode = this.lastNode;\n        this.lastNode = temp;\n    };\n    /**\n     * Returns an array containing all of the elements in this list in proper\n     * sequence.\n     * @return {Array.<*>} an array containing all of the elements in this list,\n     * in proper sequence.\n     */\n    LinkedList.prototype.toArray = function () {\n        var array = [];\n        var currentNode = this.firstNode;\n        while (currentNode !== null) {\n            array.push(currentNode.element);\n            currentNode = currentNode.next;\n        }\n        return array;\n    };\n    /**\n     * Returns the number of elements in this list.\n     * @return {number} the number of elements in this list.\n     */\n    LinkedList.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this list contains no elements.\n     * @return {boolean} true if this list contains no elements.\n     */\n    LinkedList.prototype.isEmpty = function () {\n        return this.nElements <= 0;\n    };\n    LinkedList.prototype.toString = function () {\n        return arrays.toString(this.toArray());\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.nodeAtIndex = function (index) {\n        if (index < 0 || index >= this.nElements) {\n            return null;\n        }\n        if (index === (this.nElements - 1)) {\n            return this.lastNode;\n        }\n        var node = this.firstNode;\n        for (var i = 0; i < index && node !== null; i++) {\n            node = node.next;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    LinkedList.prototype.createNode = function (item) {\n        return {\n            element: item,\n            next: null\n        };\n    };\n    return LinkedList;\n}()); // End of linked list\nexports.default = LinkedList;\n//# sourceMappingURL=LinkedList.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LinkedList_1 = require(\"./LinkedList\");\nvar Queue = /** @class */ (function () {\n    /**\n     * Creates an empty queue.\n     * @class A queue is a First-In-First-Out (FIFO) data structure, the first\n     * element added to the queue will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Queue() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.enqueue = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Inserts the specified element into the end of this queue.\n     * @param {Object} elem the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    Queue.prototype.add = function (elem) {\n        return this.list.add(elem);\n    };\n    /**\n     * Retrieves and removes the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.dequeue = function () {\n        if (this.list.size() !== 0) {\n            var el = this.list.first();\n            this.list.removeElementAtIndex(0);\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the head of this queue.\n     * @return {*} the head of this queue, or undefined if this queue is empty.\n     */\n    Queue.prototype.peek = function () {\n        if (this.list.size() !== 0) {\n            return this.list.first();\n        }\n        return undefined;\n    };\n    /**\n     * Returns the number of elements in this queue.\n     * @return {number} the number of elements in this queue.\n     */\n    Queue.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this queue contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this queue contains the specified element,\n     * false otherwise.\n     */\n    Queue.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this queue is empty.\n     * @return {boolean} true if and only if this queue contains no items; false\n     * otherwise.\n     */\n    Queue.prototype.isEmpty = function () {\n        return this.list.size() <= 0;\n    };\n    /**\n     * Removes all of the elements from this queue.\n     */\n    Queue.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * FIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Queue.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Queue;\n}()); // End of queue\nexports.default = Queue;\n//# sourceMappingURL=Queue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Queue_1 = require(\"./Queue\");\n/**\n * General binary search tree implementation.\n *\n * This interface allows one to search elements using a subset of their attributes (thus the\n * tree can be used as an index for complex objects).\n * The attributes required to define an ordering in the tree must be defined in the type K.\n * Any additional attribute must be defined in the type V.\n *\n * @see BSTree\n */\nvar BSTreeKV = /** @class */ (function () {\n    /**\n     * Creates an empty binary search tree.\n     * @class <p>A binary search tree is a binary tree in which each\n     * internal node stores an element such that the elements stored in the\n     * left subtree are less than it and the elements\n     * stored in the right subtree are greater.</p>\n     * <p>Formally, a binary search tree is a node-based binary tree data structure which\n     * has the following properties:</p>\n     * <ul>\n     * <li>The left subtree of a node contains only nodes with elements less\n     * than the node's element</li>\n     * <li>The right subtree of a node contains only nodes with elements greater\n     * than the node's element</li>\n     * <li>Both the left and right subtrees must also be binary search trees.</li>\n     * </ul>\n     * <p>If the inserted elements are custom objects a compare function must\n     * be provided at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function BSTreeKV(compareFunction) {\n        this.root = null;\n        this.compare = compareFunction || util.defaultCompare;\n        this.nElements = 0;\n    }\n    /**\n     * Adds the specified element to this tree if it is not already present.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if this tree did not already contain the specified element.\n     */\n    BSTreeKV.prototype.add = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        if (this.insertNode(this.createNode(element)) !== null) {\n            this.nElements++;\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Removes all of the elements from this tree.\n     */\n    BSTreeKV.prototype.clear = function () {\n        this.root = null;\n        this.nElements = 0;\n    };\n    /**\n     * Returns true if this tree contains no elements.\n     * @return {boolean} true if this tree contains no elements.\n     */\n    BSTreeKV.prototype.isEmpty = function () {\n        return this.nElements === 0;\n    };\n    /**\n     * Returns the number of elements in this tree.\n     * @return {number} the number of elements in this tree.\n     */\n    BSTreeKV.prototype.size = function () {\n        return this.nElements;\n    };\n    /**\n     * Returns true if this tree contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this tree contains the specified element,\n     * false otherwise.\n     */\n    BSTreeKV.prototype.contains = function (element) {\n        if (util.isUndefined(element)) {\n            return false;\n        }\n        return this.searchNode(this.root, element) !== null;\n    };\n    /**\n     * Looks for the value with the provided search key.\n     * @param {Object} element The key to look for\n     * @return {Object} The value found or undefined if it was not found.\n     */\n    BSTreeKV.prototype.search = function (element) {\n        var ret = this.searchNode(this.root, element);\n        if (ret === null) {\n            return undefined;\n        }\n        return ret.element;\n    };\n    /**\n     * Removes the specified element from this tree if it is present.\n     * @return {boolean} true if this tree contained the specified element.\n     */\n    BSTreeKV.prototype.remove = function (element) {\n        var node = this.searchNode(this.root, element);\n        if (node === null) {\n            return false;\n        }\n        this.removeNode(node);\n        this.nElements--;\n        return true;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * in-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.inorderTraversal = function (callback) {\n        this.inorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in pre-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.preorderTraversal = function (callback) {\n        this.preorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in post-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.postorderTraversal = function (callback) {\n        this.postorderTraversalAux(this.root, callback, {\n            stop: false\n        });\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in\n     * level-order.\n     * @param {function(Object):*} callback function to execute, it is invoked with one\n     * argument: the element value, to break the iteration you can optionally return false.\n     */\n    BSTreeKV.prototype.levelTraversal = function (callback) {\n        this.levelTraversalAux(this.root, callback);\n    };\n    /**\n     * Returns the minimum element of this tree.\n     * @return {*} the minimum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTreeKV.prototype.minimum = function () {\n        if (this.isEmpty() || this.root === null) {\n            return undefined;\n        }\n        return this.minimumAux(this.root).element;\n    };\n    /**\n     * Returns the maximum element of this tree.\n     * @return {*} the maximum element of this tree or undefined if this tree is\n     * is empty.\n     */\n    BSTreeKV.prototype.maximum = function () {\n        if (this.isEmpty() || this.root === null) {\n            return undefined;\n        }\n        return this.maximumAux(this.root).element;\n    };\n    /**\n     * Executes the provided function once for each element present in this tree in inorder.\n     * Equivalent to inorderTraversal.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    BSTreeKV.prototype.forEach = function (callback) {\n        this.inorderTraversal(callback);\n    };\n    /**\n     * Returns an array containing all of the elements in this tree in in-order.\n     * @return {Array} an array containing all of the elements in this tree in in-order.\n     */\n    BSTreeKV.prototype.toArray = function () {\n        var array = [];\n        this.inorderTraversal(function (element) {\n            array.push(element);\n            return true;\n        });\n        return array;\n    };\n    /**\n     * Returns the height of this tree.\n     * @return {number} the height of this tree or -1 if is empty.\n     */\n    BSTreeKV.prototype.height = function () {\n        return this.heightAux(this.root);\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.searchNode = function (node, element) {\n        var cmp = 1;\n        while (node !== null && cmp !== 0) {\n            cmp = this.compare(element, node.element);\n            if (cmp < 0) {\n                node = node.leftCh;\n            }\n            else if (cmp > 0) {\n                node = node.rightCh;\n            }\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.transplant = function (n1, n2) {\n        if (n1.parent === null) {\n            this.root = n2;\n        }\n        else if (n1 === n1.parent.leftCh) {\n            n1.parent.leftCh = n2;\n        }\n        else {\n            n1.parent.rightCh = n2;\n        }\n        if (n2 !== null) {\n            n2.parent = n1.parent;\n        }\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.removeNode = function (node) {\n        if (node.leftCh === null) {\n            this.transplant(node, node.rightCh);\n        }\n        else if (node.rightCh === null) {\n            this.transplant(node, node.leftCh);\n        }\n        else {\n            var y = this.minimumAux(node.rightCh);\n            if (y.parent !== node) {\n                this.transplant(y, y.rightCh);\n                y.rightCh = node.rightCh;\n                y.rightCh.parent = y;\n            }\n            this.transplant(node, y);\n            y.leftCh = node.leftCh;\n            y.leftCh.parent = y;\n        }\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.inorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.inorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.levelTraversalAux = function (node, callback) {\n        var queue = new Queue_1.default();\n        if (node !== null) {\n            queue.enqueue(node);\n        }\n        node = queue.dequeue() || null;\n        while (node != null) {\n            if (callback(node.element) === false) {\n                return;\n            }\n            if (node.leftCh !== null) {\n                queue.enqueue(node.leftCh);\n            }\n            if (node.rightCh !== null) {\n                queue.enqueue(node.rightCh);\n            }\n            node = queue.dequeue() || null;\n        }\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.preorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.preorderTraversalAux(node.rightCh, callback, signal);\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.postorderTraversalAux = function (node, callback, signal) {\n        if (node === null || signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.leftCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        this.postorderTraversalAux(node.rightCh, callback, signal);\n        if (signal.stop) {\n            return;\n        }\n        signal.stop = callback(node.element) === false;\n    };\n    BSTreeKV.prototype.minimumAux = function (node) {\n        while (node != null && node.leftCh !== null) {\n            node = node.leftCh;\n        }\n        return node;\n    };\n    BSTreeKV.prototype.maximumAux = function (node) {\n        while (node != null && node.rightCh !== null) {\n            node = node.rightCh;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.heightAux = function (node) {\n        if (node === null) {\n            return -1;\n        }\n        return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;\n    };\n    /*\n    * @private\n    */\n    BSTreeKV.prototype.insertNode = function (node) {\n        var parent = null;\n        var position = this.root;\n        while (position !== null) {\n            var cmp = this.compare(node.element, position.element);\n            if (cmp === 0) {\n                return null;\n            }\n            else if (cmp < 0) {\n                parent = position;\n                position = position.leftCh;\n            }\n            else {\n                parent = position;\n                position = position.rightCh;\n            }\n        }\n        node.parent = parent;\n        if (parent === null) {\n            // tree is empty\n            this.root = node;\n        }\n        else if (this.compare(node.element, parent.element) < 0) {\n            parent.leftCh = node;\n        }\n        else {\n            parent.rightCh = node;\n        }\n        return node;\n    };\n    /**\n     * @private\n     */\n    BSTreeKV.prototype.createNode = function (element) {\n        return {\n            element: element,\n            leftCh: null,\n            rightCh: null,\n            parent: null\n        };\n    };\n    return BSTreeKV;\n}());\nexports.default = BSTreeKV;\n//# sourceMappingURL=BSTreeKV.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BSTreeKV_1 = require(\"./BSTreeKV\");\n/**\n * Special-case of the binary search tree in which the search key is equal to the element type.\n * This definition is suitable when the element type can not be split between what defines its order\n * and what does not (eg. primitive types as opposed to indexed records).\n *\n * The table below shows some use-case examples for both interfaces:\n *\n *           element type              |  most suitable interface\n * ------------------------------------|----------------------------\n *    number                           |  BSTree<number>\n *    string                           |  BSTree<string>\n * { order: number, data: string }     |  BSTreeKV<{order: number}, {order: number, data: string}>\n *\n * @see BSTreeKV\n */\nvar BSTree = /** @class */ (function (_super) {\n    __extends(BSTree, _super);\n    function BSTree() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return BSTree;\n}(BSTreeKV_1.default));\nexports.default = BSTree;\n//# sourceMappingURL=BSTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar collections = require(\"./util\");\nvar arrays = require(\"./arrays\");\nvar Heap = /** @class */ (function () {\n    /**\n     * Creates an empty Heap.\n     * @class\n     * <p>A heap is a binary tree, where the nodes maintain the heap property:\n     * each node is smaller than each of its children and therefore a MinHeap\n     * This implementation uses an array to store elements.</p>\n     * <p>If the inserted elements are custom objects a compare function must be provided,\n     *  at construction time, otherwise the <=, === and >= operators are\n     * used to compare elements. Example:</p>\n     *\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a\n     * reverse compare function to accomplish that behavior. Example:</p>\n     *\n     * <pre>\n     * function reverseCompare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return 1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return -1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     *\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two elements. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function Heap(compareFunction) {\n        /**\n         * Array used to store the elements of the heap.\n         * @type {Array.<Object>}\n         * @private\n         */\n        this.data = [];\n        this.compare = compareFunction || collections.defaultCompare;\n    }\n    /**\n     * Returns the index of the left child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the left child\n     * for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    Heap.prototype.leftChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 1;\n    };\n    /**\n     * Returns the index of the right child of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the right child\n     * for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    Heap.prototype.rightChildIndex = function (nodeIndex) {\n        return (2 * nodeIndex) + 2;\n    };\n    /**\n     * Returns the index of the parent of the node at the given index.\n     * @param {number} nodeIndex The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    Heap.prototype.parentIndex = function (nodeIndex) {\n        return Math.floor((nodeIndex - 1) / 2);\n    };\n    /**\n     * Returns the index of the smaller child node (if it exists).\n     * @param {number} leftChild left child index.\n     * @param {number} rightChild right child index.\n     * @return {number} the index with the minimum value or -1 if it doesn't\n     * exists.\n     * @private\n     */\n    Heap.prototype.minIndex = function (leftChild, rightChild) {\n        if (rightChild >= this.data.length) {\n            if (leftChild >= this.data.length) {\n                return -1;\n            }\n            else {\n                return leftChild;\n            }\n        }\n        else {\n            if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {\n                return leftChild;\n            }\n            else {\n                return rightChild;\n            }\n        }\n    };\n    /**\n     * Moves the node at the given index up to its proper place in the heap.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    Heap.prototype.siftUp = function (index) {\n        var parent = this.parentIndex(index);\n        while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {\n            arrays.swap(this.data, parent, index);\n            index = parent;\n            parent = this.parentIndex(index);\n        }\n    };\n    /**\n     * Moves the node at the given index down to its proper place in the heap.\n     * @param {number} nodeIndex The index of the node to move down.\n     * @private\n     */\n    Heap.prototype.siftDown = function (nodeIndex) {\n        //smaller child index\n        var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {\n            arrays.swap(this.data, min, nodeIndex);\n            nodeIndex = min;\n            min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));\n        }\n    };\n    /**\n     * Retrieves but does not remove the root element of this heap.\n     * @return {*} The value at the root of the heap. Returns undefined if the\n     * heap is empty.\n     */\n    Heap.prototype.peek = function () {\n        if (this.data.length > 0) {\n            return this.data[0];\n        }\n        else {\n            return undefined;\n        }\n    };\n    /**\n     * Adds the given element into the heap.\n     * @param {*} element the element.\n     * @return true if the element was added or fals if it is undefined.\n     */\n    Heap.prototype.add = function (element) {\n        if (collections.isUndefined(element)) {\n            return false;\n        }\n        this.data.push(element);\n        this.siftUp(this.data.length - 1);\n        return true;\n    };\n    /**\n     * Retrieves and removes the root element of this heap.\n     * @return {*} The value removed from the root of the heap. Returns\n     * undefined if the heap is empty.\n     */\n    Heap.prototype.removeRoot = function () {\n        if (this.data.length > 0) {\n            var obj = this.data[0];\n            this.data[0] = this.data[this.data.length - 1];\n            this.data.splice(this.data.length - 1, 1);\n            if (this.data.length > 0) {\n                this.siftDown(0);\n            }\n            return obj;\n        }\n        return undefined;\n    };\n    /**\n     * Returns true if this heap contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this Heap contains the specified element, false\n     * otherwise.\n     */\n    Heap.prototype.contains = function (element) {\n        var equF = collections.compareToEquals(this.compare);\n        return arrays.contains(this.data, element, equF);\n    };\n    /**\n     * Returns the number of elements in this heap.\n     * @return {number} the number of elements in this heap.\n     */\n    Heap.prototype.size = function () {\n        return this.data.length;\n    };\n    /**\n     * Checks if this heap is empty.\n     * @return {boolean} true if and only if this heap contains no items; false\n     * otherwise.\n     */\n    Heap.prototype.isEmpty = function () {\n        return this.data.length <= 0;\n    };\n    /**\n     * Removes all of the elements from this heap.\n     */\n    Heap.prototype.clear = function () {\n        this.data.length = 0;\n    };\n    /**\n     * Executes the provided function once for each element present in this heap in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Heap.prototype.forEach = function (callback) {\n        arrays.forEach(this.data, callback);\n    };\n    return Heap;\n}());\nexports.default = Heap;\n//# sourceMappingURL=Heap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Dictionary_1 = require(\"./Dictionary\");\nvar util = require(\"./util\");\n/**\n * This class is used by the LinkedDictionary Internally\n * Has to be a class, not an interface, because it needs to have\n * the 'unlink' function defined.\n */\nvar LinkedDictionaryPair = /** @class */ (function () {\n    function LinkedDictionaryPair(key, value) {\n        this.key = key;\n        this.value = value;\n    }\n    LinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return LinkedDictionaryPair;\n}());\n/**\n * The head and tail elements of the list have null key and value properties but they\n * usually link to normal nodes.\n */\nvar HeadOrTailLinkedDictionaryPair = /** @class */ (function () {\n    function HeadOrTailLinkedDictionaryPair() {\n        this.key = null;\n        this.value = null;\n    }\n    HeadOrTailLinkedDictionaryPair.prototype.unlink = function () {\n        this.prev.next = this.next;\n        this.next.prev = this.prev;\n    };\n    return HeadOrTailLinkedDictionaryPair;\n}());\nfunction isHeadOrTailLinkedDictionaryPair(p) {\n    return !p.next;\n}\nvar LinkedDictionary = /** @class */ (function (_super) {\n    __extends(LinkedDictionary, _super);\n    function LinkedDictionary(toStrFunction) {\n        var _this = _super.call(this, toStrFunction) || this;\n        _this.head = new HeadOrTailLinkedDictionaryPair();\n        _this.tail = new HeadOrTailLinkedDictionaryPair();\n        _this.head.next = _this.tail;\n        _this.tail.prev = _this.head;\n        return _this;\n    }\n    /**\n     * Inserts the new node to the 'tail' of the list, updating the\n     * neighbors, and moving 'this.tail' (the End of List indicator) that\n     * to the end.\n     */\n    LinkedDictionary.prototype.appendToTail = function (entry) {\n        var lastNode = this.tail.prev;\n        lastNode.next = entry;\n        entry.prev = lastNode;\n        entry.next = this.tail;\n        this.tail.prev = entry;\n    };\n    /**\n     * Retrieves a linked dictionary from the table internally\n     */\n    LinkedDictionary.prototype.getLinkedDictionaryPair = function (key) {\n        if (util.isUndefined(key)) {\n            return undefined;\n        }\n        var k = '$' + this.toStr(key);\n        var pair = (this.table[k]);\n        return pair;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns undefined if this dictionary contains no mapping for this key.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * undefined if the map contains no mapping for this key.\n     */\n    LinkedDictionary.prototype.getValue = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes the mapping for this key from this dictionary if it is present.\n     * Also, if a value is present for this key, the entry is removed from the\n     * insertion ordering.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @return {*} previous value associated with specified key, or undefined if\n     * there was no mapping for key.\n     */\n    LinkedDictionary.prototype.remove = function (key) {\n        var pair = this.getLinkedDictionaryPair(key);\n        if (!util.isUndefined(pair)) {\n            _super.prototype.remove.call(this, key); // This will remove it from the table\n            pair.unlink(); // This will unlink it from the chain\n            return pair.value;\n        }\n        return undefined;\n    };\n    /**\n     * Removes all mappings from this LinkedDictionary.\n     * @this {collections.LinkedDictionary}\n     */\n    LinkedDictionary.prototype.clear = function () {\n        _super.prototype.clear.call(this);\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n    };\n    /**\n     * Internal function used when updating an existing KeyValue pair.\n     * It places the new value indexed by key into the table, but maintains\n     * its place in the linked ordering.\n     */\n    LinkedDictionary.prototype.replace = function (oldPair, newPair) {\n        var k = '$' + this.toStr(newPair.key);\n        // set the new Pair's links to existingPair's links\n        newPair.next = oldPair.next;\n        newPair.prev = oldPair.prev;\n        // Delete Existing Pair from the table, unlink it from chain.\n        // As a result, the nElements gets decremented by this operation\n        this.remove(oldPair.key);\n        // Link new Pair in place of where oldPair was,\n        // by pointing the old pair's neighbors to it.\n        newPair.prev.next = newPair;\n        newPair.next.prev = newPair;\n        this.table[k] = newPair;\n        // To make up for the fact that the number of elements was decremented,\n        // We need to increase it by one.\n        ++this.nElements;\n    };\n    /**\n     * Associates the specified value with the specified key in this dictionary.\n     * If the dictionary previously contained a mapping for this key, the old\n     * value is replaced by the specified value.\n     * Updating of a key that already exists maintains its place in the\n     * insertion order into the map.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or undefined if\n     * there was no mapping for the key or if the key/value are undefined.\n     */\n    LinkedDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return undefined;\n        }\n        var existingPair = this.getLinkedDictionaryPair(key);\n        var newPair = new LinkedDictionaryPair(key, value);\n        var k = '$' + this.toStr(key);\n        // If there is already an element for that key, we\n        // keep it's place in the LinkedList\n        if (!util.isUndefined(existingPair)) {\n            this.replace(existingPair, newPair);\n            return existingPair.value;\n        }\n        else {\n            this.appendToTail(newPair);\n            this.table[k] = newPair;\n            ++this.nElements;\n            return undefined;\n        }\n    };\n    /**\n     * Returns an array containing all of the keys in this LinkedDictionary, ordered\n     * by insertion order.\n     * @return {Array} an array containing all of the keys in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.keys = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(key);\n        });\n        return array;\n    };\n    /**\n     * Returns an array containing all of the values in this LinkedDictionary, ordered by\n     * insertion order.\n     * @return {Array} an array containing all of the values in this LinkedDictionary,\n     * ordered by insertion order.\n     */\n    LinkedDictionary.prototype.values = function () {\n        var array = [];\n        this.forEach(function (key, value) {\n            array.push(value);\n        });\n        return array;\n    };\n    /**\n     * Executes the provided function once for each key-value pair\n     * present in this LinkedDictionary. It is done in the order of insertion\n     * into the LinkedDictionary\n     * @param {function(Object,Object):*} callback function to execute, it is\n     * invoked with two arguments: key and value. To break the iteration you can\n     * optionally return false.\n     */\n    LinkedDictionary.prototype.forEach = function (callback) {\n        var crawlNode = this.head.next;\n        while (!isHeadOrTailLinkedDictionaryPair(crawlNode)) {\n            var ret = callback(crawlNode.key, crawlNode.value);\n            if (ret === false) {\n                return;\n            }\n            crawlNode = crawlNode.next;\n        }\n    };\n    return LinkedDictionary;\n}(Dictionary_1.default)); // End of LinkedDictionary\nexports.default = LinkedDictionary;\n// /**\n//  * Returns true if this dictionary is equal to the given dictionary.\n//  * Two dictionaries are equal if they contain the same mappings.\n//  * @param {collections.Dictionary} other the other dictionary.\n//  * @param {function(Object,Object):boolean=} valuesEqualFunction optional\n//  * function used to check if two values are equal.\n//  * @return {boolean} true if this dictionary is equal to the given dictionary.\n//  */\n// collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {\n// \tconst eqF = valuesEqualFunction || collections.defaultEquals;\n// \tif(!(other instanceof collections.Dictionary)){\n// \t\treturn false;\n// \t}\n// \tif(this.size() !== other.size()){\n// \t\treturn false;\n// \t}\n// \treturn this.equalsAux(this.firstNode,other.firstNode,eqF);\n// }\n//# sourceMappingURL=LinkedDictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Dictionary_1 = require(\"./Dictionary\");\nvar arrays = require(\"./arrays\");\nvar MultiDictionary = /** @class */ (function () {\n    /**\n     * Creates an empty multi dictionary.\n     * @class <p>A multi dictionary is a special kind of dictionary that holds\n     * multiple values against each key. Setting a value into the dictionary will\n     * add the value to an array at that key. Getting a key will return an array,\n     * holding all the values set to that key.\n     * You can configure to allow duplicates in the values.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>If the keys are custom objects a function which converts keys to strings must be\n     * provided. Example:</p>\n     *\n     * <pre>\n     * function petToString(pet) {\n     *     return pet.name;\n     * }\n     * </pre>\n     * <p>If the values are custom objects a function to check equality between values\n     * must be provided. Example:</p>\n     *\n     * <pre>\n     * function petsAreEqualByAge(pet1,pet2) {\n     *     return pet1.age === pet2.age;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object):string=} toStrFunction optional function\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     * @param {function(Object,Object):boolean=} valuesEqualsFunction optional\n     * function to check if two values are equal.\n     *\n     * @param allowDuplicateValues\n     */\n    function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {\n        if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }\n        this.dict = new Dictionary_1.default(toStrFunction);\n        this.equalsF = valuesEqualsFunction || util.defaultEquals;\n        this.allowDuplicate = allowDuplicateValues;\n    }\n    /**\n     * Returns an array holding the values to which this dictionary maps\n     * the specified key.\n     * Returns an empty array if this dictionary contains no mappings for this key.\n     * @param {Object} key key whose associated values are to be returned.\n     * @return {Array} an array holding the values to which this dictionary maps\n     * the specified key.\n     */\n    MultiDictionary.prototype.getValue = function (key) {\n        var values = this.dict.getValue(key);\n        if (util.isUndefined(values)) {\n            return [];\n        }\n        return arrays.copy(values);\n    };\n    /**\n     * Adds the value to the array associated with the specified key, if\n     * it is not already present.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} value the value to add to the array at the key\n     * @return {boolean} true if the value was not already associated with that key.\n     */\n    MultiDictionary.prototype.setValue = function (key, value) {\n        if (util.isUndefined(key) || util.isUndefined(value)) {\n            return false;\n        }\n        var array = this.dict.getValue(key);\n        if (util.isUndefined(array)) {\n            this.dict.setValue(key, [value]);\n            return true;\n        }\n        if (!this.allowDuplicate) {\n            if (arrays.contains(array, value, this.equalsF)) {\n                return false;\n            }\n        }\n        array.push(value);\n        return true;\n    };\n    /**\n     * Removes the specified values from the array of values associated with the\n     * specified key. If a value isn't given, all values associated with the specified\n     * key are removed.\n     * @param {Object} key key whose mapping is to be removed from the\n     * dictionary.\n     * @param {Object=} value optional argument to specify the value to remove\n     * from the array associated with the specified key.\n     * @return {*} true if the dictionary changed, false if the key doesn't exist or\n     * if the specified value isn't associated with the specified key.\n     */\n    MultiDictionary.prototype.remove = function (key, value) {\n        if (util.isUndefined(value)) {\n            var v = this.dict.remove(key);\n            return !util.isUndefined(v);\n        }\n        var array = this.dict.getValue(key);\n        if (!util.isUndefined(array) && arrays.remove(array, value, this.equalsF)) {\n            if (array.length === 0) {\n                this.dict.remove(key);\n            }\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Returns an array containing all of the keys in this dictionary.\n     * @return {Array} an array containing all of the keys in this dictionary.\n     */\n    MultiDictionary.prototype.keys = function () {\n        return this.dict.keys();\n    };\n    /**\n     * Returns an array containing all of the values in this dictionary.\n     * @return {Array} an array containing all of the values in this dictionary.\n     */\n    MultiDictionary.prototype.values = function () {\n        var values = this.dict.values();\n        var array = [];\n        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n            var v = values_1[_i];\n            for (var _a = 0, v_1 = v; _a < v_1.length; _a++) {\n                var w = v_1[_a];\n                array.push(w);\n            }\n        }\n        return array;\n    };\n    /**\n     * Returns true if this dictionary at least one value associatted the specified key.\n     * @param {Object} key key whose presence in this dictionary is to be\n     * tested.\n     * @return {boolean} true if this dictionary at least one value associatted\n     * the specified key.\n     */\n    MultiDictionary.prototype.containsKey = function (key) {\n        return this.dict.containsKey(key);\n    };\n    /**\n     * Removes all mappings from this dictionary.\n     */\n    MultiDictionary.prototype.clear = function () {\n        this.dict.clear();\n    };\n    /**\n     * Returns the number of keys in this dictionary.\n     * @return {number} the number of key-value mappings in this dictionary.\n     */\n    MultiDictionary.prototype.size = function () {\n        return this.dict.size();\n    };\n    /**\n     * Returns true if this dictionary contains no mappings.\n     * @return {boolean} true if this dictionary contains no mappings.\n     */\n    MultiDictionary.prototype.isEmpty = function () {\n        return this.dict.isEmpty();\n    };\n    return MultiDictionary;\n}()); // end of multi dictionary\nexports.default = MultiDictionary;\n//# sourceMappingURL=MultiDictionary.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Dictionary_1 = require(\"./Dictionary\");\nvar util = require(\"./util\");\nvar FactoryDictionary = /** @class */ (function (_super) {\n    __extends(FactoryDictionary, _super);\n    /**\n     * Creates an empty dictionary.\n     * @class <p>Dictionaries map keys to values; each key can map to at most one value.\n     * This implementation accepts any kind of objects as keys.</p>\n     *\n     * <p>The default factory function should return a new object of the provided\n     * type. Example:</p>\n     * <pre>\n     * function petFactory() {\n     *  return new Pet();\n     * }\n     * </pre>\n     *\n     * <p>If the keys are custom objects a function which converts keys to unique\n     * strings must be provided. Example:</p>\n     * <pre>\n     * function petToString(pet) {\n     *  return pet.name;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function():V=} defaultFactoryFunction function used to create a\n     * default object.\n     * @param {function(Object):string=} toStrFunction optional function used\n     * to convert keys to strings. If the keys aren't strings or if toString()\n     * is not appropriate, a custom function which receives a key and returns a\n     * unique string must be provided.\n     */\n    function FactoryDictionary(defaultFactoryFunction, toStrFunction) {\n        var _this = _super.call(this, toStrFunction) || this;\n        _this.defaultFactoryFunction = defaultFactoryFunction;\n        return _this;\n    }\n    /**\n     * Associates the specified default value with the specified key in this dictionary,\n     * if it didn't contain the key yet. If the key existed, the existing value will be used.\n     * @param {Object} key key with which the specified value is to be\n     * associated.\n     * @param {Object} defaultValue default value to be associated with the specified key.\n     * @return {*} previous value associated with the specified key, or the default value,\n     * if the key didn't exist yet.\n     */\n    FactoryDictionary.prototype.setDefault = function (key, defaultValue) {\n        var currentValue = _super.prototype.getValue.call(this, key);\n        if (util.isUndefined(currentValue)) {\n            this.setValue(key, defaultValue);\n            return defaultValue;\n        }\n        return currentValue;\n    };\n    /**\n     * Returns the value to which this dictionary maps the specified key.\n     * Returns a default value created by the factory passed in the constructor,\n     * if this dictionary contains no mapping for this key. The missing key will\n     * automatically be added to the dictionary.\n     * @param {Object} key key whose associated value is to be returned.\n     * @return {*} the value to which this dictionary maps the specified key or\n     * a default value if the map contains no mapping for this key.\n     */\n    FactoryDictionary.prototype.getValue = function (key) {\n        return this.setDefault(key, this.defaultFactoryFunction());\n    };\n    return FactoryDictionary;\n}(Dictionary_1.default));\nexports.default = FactoryDictionary;\n//# sourceMappingURL=FactoryDictionary.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = require(\"./util\");\nvar Heap_1 = require(\"./Heap\");\nvar PriorityQueue = /** @class */ (function () {\n    /**\n     * Creates an empty priority queue.\n     * @class <p>In a priority queue each element is associated with a \"priority\",\n     * elements are dequeued in highest-priority-first order (the elements with the\n     * highest priority are dequeued first). Priority Queues are implemented as heaps.\n     * If the inserted elements are custom objects a compare function must be provided,\n     * otherwise the <=, === and >= operators are used to compare object priority.</p>\n     * <pre>\n     * function compare(a, b) {\n     *  if (a is less than b by some ordering criterion) {\n     *     return -1;\n     *  } if (a is greater than b by the ordering criterion) {\n     *     return 1;\n     *  }\n     *  // a must be equal to b\n     *  return 0;\n     * }\n     * </pre>\n     * @constructor\n     * @param {function(Object,Object):number=} compareFunction optional\n     * function used to compare two element priorities. Must return a negative integer,\n     * zero, or a positive integer as the first argument is less than, equal to,\n     * or greater than the second.\n     */\n    function PriorityQueue(compareFunction) {\n        this.heap = new Heap_1.default(util.reverseCompareFunction(compareFunction));\n    }\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Inserts the specified element into this priority queue.\n     * @param {Object} element the element to insert.\n     * @return {boolean} true if the element was inserted, or false if it is undefined.\n     */\n    PriorityQueue.prototype.add = function (element) {\n        return this.heap.add(element);\n    };\n    /**\n     * Retrieves and removes the highest priority element of this queue.\n     * @return {*} the the highest priority element of this queue,\n     *  or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        if (this.heap.size() !== 0) {\n            var el = this.heap.peek();\n            this.heap.removeRoot();\n            return el;\n        }\n        return undefined;\n    };\n    /**\n     * Retrieves, but does not remove, the highest priority element of this queue.\n     * @return {*} the highest priority element of this queue, or undefined if this queue is empty.\n     */\n    PriorityQueue.prototype.peek = function () {\n        return this.heap.peek();\n    };\n    /**\n     * Returns true if this priority queue contains the specified element.\n     * @param {Object} element element to search for.\n     * @return {boolean} true if this priority queue contains the specified element,\n     * false otherwise.\n     */\n    PriorityQueue.prototype.contains = function (element) {\n        return this.heap.contains(element);\n    };\n    /**\n     * Checks if this priority queue is empty.\n     * @return {boolean} true if and only if this priority queue contains no items; false\n     * otherwise.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.heap.isEmpty();\n    };\n    /**\n     * Returns the number of elements in this priority queue.\n     * @return {number} the number of elements in this priority queue.\n     */\n    PriorityQueue.prototype.size = function () {\n        return this.heap.size();\n    };\n    /**\n     * Removes all of the elements from this priority queue.\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.heap.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this queue in\n     * no particular order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    PriorityQueue.prototype.forEach = function (callback) {\n        this.heap.forEach(callback);\n    };\n    return PriorityQueue;\n}()); // end of priority queue\nexports.default = PriorityQueue;\n//# sourceMappingURL=PriorityQueue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LinkedList_1 = require(\"./LinkedList\");\nvar Stack = /** @class */ (function () {\n    /**\n     * Creates an empty Stack.\n     * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last\n     * element added to the stack will be the first one to be removed. This\n     * implementation uses a linked list as a container.\n     * @constructor\n     */\n    function Stack() {\n        this.list = new LinkedList_1.default();\n    }\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.push = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Pushes an item onto the top of this stack.\n     * @param {Object} elem the element to be pushed onto this stack.\n     * @return {boolean} true if the element was pushed or false if it is undefined.\n     */\n    Stack.prototype.add = function (elem) {\n        return this.list.add(elem, 0);\n    };\n    /**\n     * Removes the object at the top of this stack and returns that object.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.pop = function () {\n        return this.list.removeElementAtIndex(0);\n    };\n    /**\n     * Looks at the object at the top of this stack without removing it from the\n     * stack.\n     * @return {*} the object at the top of this stack or undefined if the\n     * stack is empty.\n     */\n    Stack.prototype.peek = function () {\n        return this.list.first();\n    };\n    /**\n     * Returns the number of elements in this stack.\n     * @return {number} the number of elements in this stack.\n     */\n    Stack.prototype.size = function () {\n        return this.list.size();\n    };\n    /**\n     * Returns true if this stack contains the specified element.\n     * <p>If the elements inside this stack are\n     * not comparable with the === operator, a custom equals function should be\n     * provided to perform searches, the function must receive two arguments and\n     * return true if they are equal, false otherwise. Example:</p>\n     *\n     * <pre>\n     * const petsAreEqualByName (pet1, pet2) {\n     *  return pet1.name === pet2.name;\n     * }\n     * </pre>\n     * @param {Object} elem element to search for.\n     * @param {function(Object,Object):boolean=} equalsFunction optional\n     * function to check if two elements are equal.\n     * @return {boolean} true if this stack contains the specified element,\n     * false otherwise.\n     */\n    Stack.prototype.contains = function (elem, equalsFunction) {\n        return this.list.contains(elem, equalsFunction);\n    };\n    /**\n     * Checks if this stack is empty.\n     * @return {boolean} true if and only if this stack contains no items; false\n     * otherwise.\n     */\n    Stack.prototype.isEmpty = function () {\n        return this.list.isEmpty();\n    };\n    /**\n     * Removes all of the elements from this stack.\n     */\n    Stack.prototype.clear = function () {\n        this.list.clear();\n    };\n    /**\n     * Executes the provided function once for each element present in this stack in\n     * LIFO order.\n     * @param {function(Object):*} callback function to execute, it is\n     * invoked with one argument: the element value, to break the iteration you can\n     * optionally return false.\n     */\n    Stack.prototype.forEach = function (callback) {\n        this.list.forEach(callback);\n    };\n    return Stack;\n}()); // End of stack\nexports.default = Stack;\n//# sourceMappingURL=Stack.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"BEFORE\"] = 0] = \"BEFORE\";\n    Direction[Direction[\"AFTER\"] = 1] = \"AFTER\";\n    Direction[Direction[\"INSIDE_AT_END\"] = 2] = \"INSIDE_AT_END\";\n    Direction[Direction[\"INSIDE_AT_START\"] = 3] = \"INSIDE_AT_START\";\n})(Direction || (Direction = {}));\nvar MultiRootTree = /** @class */ (function () {\n    function MultiRootTree(rootIds, nodes) {\n        if (rootIds === void 0) { rootIds = []; }\n        if (nodes === void 0) { nodes = {}; }\n        this.rootIds = rootIds;\n        this.nodes = nodes;\n        this.initRootIds();\n        this.initNodes();\n    }\n    MultiRootTree.prototype.initRootIds = function () {\n        for (var _i = 0, _a = this.rootIds; _i < _a.length; _i++) {\n            var rootId = _a[_i];\n            this.createEmptyNodeIfNotExist(rootId);\n        }\n    };\n    MultiRootTree.prototype.initNodes = function () {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var _i = 0, _a = this.nodes[nodeKey]; _i < _a.length; _i++) {\n                    var nodeListItem = _a[_i];\n                    this.createEmptyNodeIfNotExist(nodeListItem);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.createEmptyNodeIfNotExist = function (nodeKey) {\n        if (!this.nodes[nodeKey]) {\n            this.nodes[nodeKey] = [];\n        }\n    };\n    MultiRootTree.prototype.getRootIds = function () {\n        var clone = this.rootIds.slice();\n        return clone;\n    };\n    MultiRootTree.prototype.getNodes = function () {\n        var clone = {};\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                clone[nodeKey] = this.nodes[nodeKey].slice();\n            }\n        }\n        return clone;\n    };\n    MultiRootTree.prototype.getObject = function () {\n        return {\n            rootIds: this.getRootIds(),\n            nodes: this.getNodes(),\n        };\n    };\n    MultiRootTree.prototype.toObject = function () {\n        return this.getObject();\n    };\n    MultiRootTree.prototype.flatten = function () {\n        var _this = this;\n        var extraPropsObject = [];\n        for (var i = 0; i < this.rootIds.length; i++) {\n            var rootId = this.rootIds[i];\n            extraPropsObject.push({\n                id: rootId,\n                level: 0,\n                hasParent: false,\n                childrenCount: 0,\n            });\n            traverse(rootId, this.nodes, extraPropsObject, 0);\n        }\n        for (var _i = 0, extraPropsObject_1 = extraPropsObject; _i < extraPropsObject_1.length; _i++) {\n            var o = extraPropsObject_1[_i];\n            o.childrenCount = countChildren(o.id);\n        }\n        return extraPropsObject;\n        function countChildren(id) {\n            if (!_this.nodes[id]) {\n                return 0;\n            }\n            else {\n                var childrenCount = _this.nodes[id].length;\n                return childrenCount;\n            }\n        }\n        function traverse(startId, nodes, returnArray, level) {\n            if (level === void 0) { level = 0; }\n            if (!startId || !nodes || !returnArray || !nodes[startId]) {\n                return;\n            }\n            level++;\n            var idsList = nodes[startId];\n            for (var i = 0; i < idsList.length; i++) {\n                var id = idsList[i];\n                returnArray.push({ id: id, level: level, hasParent: true });\n                traverse(id, nodes, returnArray, level);\n            }\n            level--;\n        }\n    };\n    MultiRootTree.prototype.moveIdBeforeId = function (moveId, beforeId) {\n        return this.moveId(moveId, beforeId, Direction.BEFORE);\n    };\n    MultiRootTree.prototype.moveIdAfterId = function (moveId, afterId) {\n        return this.moveId(moveId, afterId, Direction.AFTER);\n    };\n    MultiRootTree.prototype.moveIdIntoId = function (moveId, insideId, atStart) {\n        if (atStart === void 0) { atStart = true; }\n        if (atStart) {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_START);\n        }\n        else {\n            return this.moveId(moveId, insideId, Direction.INSIDE_AT_END);\n        }\n    };\n    MultiRootTree.prototype.swapRootIdWithRootId = function (rootId, withRootId) {\n        var leftIndex = this.findRootId(rootId);\n        var rightIndex = this.findRootId(withRootId);\n        this.swapRootPositionWithRootPosition(leftIndex, rightIndex);\n    };\n    MultiRootTree.prototype.swapRootPositionWithRootPosition = function (swapRootPosition, withRootPosition) {\n        var temp = this.rootIds[withRootPosition];\n        this.rootIds[withRootPosition] = this.rootIds[swapRootPosition];\n        this.rootIds[swapRootPosition] = temp;\n    };\n    MultiRootTree.prototype.deleteId = function (id) {\n        this.rootDeleteId(id);\n        this.nodeAndSubNodesDelete(id);\n        this.nodeRefrencesDelete(id);\n    };\n    MultiRootTree.prototype.insertIdBeforeId = function (beforeId, insertId) {\n        var foundRootIdIndex = this.findRootId(beforeId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdAfterId = function (belowId, insertId) {\n        var foundRootIdIndex = this.findRootId(belowId);\n        if (foundRootIdIndex > -1) {\n            this.insertIdIntoRoot(insertId, foundRootIdIndex + 1);\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                var foundNodeIdIndex = this.findNodeId(nodeKey, belowId);\n                if (foundNodeIdIndex > -1) {\n                    this.insertIdIntoNode(nodeKey, insertId, foundNodeIdIndex + 1);\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.insertIdIntoId = function (insideId, insertId) {\n        this.nodeInsertAtEnd(insideId, insertId);\n        this.nodes[insertId] = [];\n    };\n    MultiRootTree.prototype.insertIdIntoRoot = function (id, position) {\n        if (position === undefined) {\n            this.rootInsertAtEnd(id);\n        }\n        else {\n            if (position < 0) {\n                var length_1 = this.rootIds.length;\n                this.rootIds.splice((position + length_1 + 1), 0, id);\n            }\n            else {\n                this.rootIds.splice(position, 0, id);\n            }\n        }\n        this.nodes[id] = this.nodes[id] || [];\n    };\n    MultiRootTree.prototype.insertIdIntoNode = function (nodeKey, id, position) {\n        this.nodes[nodeKey] = this.nodes[nodeKey] || [];\n        this.nodes[id] = this.nodes[id] || [];\n        if (position === undefined) {\n            this.nodeInsertAtEnd(nodeKey, id);\n        }\n        else {\n            if (position < 0) {\n                var length_2 = this.nodes[nodeKey].length;\n                this.nodes[nodeKey].splice((position + length_2 + 1), 0, id);\n            }\n            else {\n                this.nodes[nodeKey].splice(position, 0, id);\n            }\n        }\n    };\n    MultiRootTree.prototype.moveId = function (moveId, beforeId, direction) {\n        var sourceId = moveId;\n        var sourceRootIndex = this.findRootId(sourceId);\n        var sourceNodeKey;\n        var sourceNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            sourceNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                sourceNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        var targetId = beforeId;\n        var targetRootIndex = this.findRootId(targetId);\n        var targetNodeKey;\n        var targetNodeIdIndex;\n        if (this.nodes[beforeId]) {\n            targetNodeKey = beforeId;\n        }\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                targetNodeIdIndex = this.findNodeId(nodeKey, beforeId);\n                break;\n            }\n        }\n        // got all\n        if (sourceRootIndex > -1) {\n            if (targetRootIndex > -1) {\n                // moving root to root\n                // console.log(`Moving ROOT to ROOT`);\n                // console.log(`RootIds:`);\n                // console.log(this.rootIds);\n                // console.log(`TargetIndex=${targetRootIndex}, SourceIndex=${sourceRootIndex}`);\n                // console.log(`TargetId=${targetId}, SourceId=${sourceId}`);\n                this.rootDelete(sourceRootIndex); // indexes change now\n                if (targetRootIndex > sourceRootIndex) {\n                    targetRootIndex--;\n                }\n                else {\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving root (source) ABOVE node (target)\n                // will remove one entry from roots\n                this.rootDelete(sourceRootIndex);\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (targetRootIndex > -1) {\n                // moving node (source) ABOVE root (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            // this.nodeInsertId(nodeKey, sourceId, index);\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                switch (direction) {\n                    case Direction.BEFORE:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex);\n                        break;\n                    case Direction.AFTER:\n                        this.insertIdIntoRoot(sourceId, targetRootIndex + 1);\n                        break;\n                    case Direction.INSIDE_AT_START:\n                        this.nodeInsertAtStart(targetId, sourceId);\n                        break;\n                    case Direction.INSIDE_AT_END:\n                        this.nodeInsertAtEnd(targetId, sourceId);\n                        break;\n                }\n            }\n            else {\n                // moving node (source) ABOVE node (target)\n                // delete source id from each node\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, sourceId);\n                        if (index > -1) {\n                            this.nodeDeleteAtIndex(nodeKey, index);\n                            break;\n                        }\n                    }\n                }\n                for (var nodeKey in this.nodes) {\n                    if (this.nodes.hasOwnProperty(nodeKey)) {\n                        var index = this.findNodeId(nodeKey, targetId);\n                        if (index > -1) {\n                            switch (direction) {\n                                case Direction.BEFORE:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index);\n                                    break;\n                                case Direction.AFTER:\n                                    this.insertIdIntoNode(nodeKey, sourceId, index + 1);\n                                    break;\n                                case Direction.INSIDE_AT_START:\n                                    this.nodeInsertAtStart(targetId, sourceId);\n                                    break;\n                                case Direction.INSIDE_AT_END:\n                                    this.nodeInsertAtEnd(targetId, sourceId);\n                                    break;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.swapArrayElements = function (arr, indexA, indexB) {\n        var temp = arr[indexA];\n        arr[indexA] = arr[indexB];\n        arr[indexB] = temp;\n        return arr;\n    };\n    MultiRootTree.prototype.rootDeleteId = function (id) {\n        var index = this.findRootId(id);\n        if (index > -1) {\n            this.rootDelete(index);\n        }\n    };\n    MultiRootTree.prototype.nodeAndSubNodesDelete = function (nodeKey) {\n        var toDeleteLater = [];\n        for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n            var id = this.nodes[nodeKey][i];\n            this.nodeAndSubNodesDelete(id);\n            toDeleteLater.push(nodeKey);\n        }\n        this.nodeDelete(nodeKey);\n        for (var i = 0; i < toDeleteLater.length; i++) {\n            this.nodeDelete(toDeleteLater[i]);\n        }\n    };\n    MultiRootTree.prototype.nodeRefrencesDelete = function (id) {\n        for (var nodeKey in this.nodes) {\n            if (this.nodes.hasOwnProperty(nodeKey)) {\n                for (var i = 0; i < this.nodes[nodeKey].length; i++) {\n                    var targetId = this.nodes[nodeKey][i];\n                    if (targetId === id) {\n                        this.nodeDeleteAtIndex(nodeKey, i);\n                    }\n                }\n            }\n        }\n    };\n    MultiRootTree.prototype.nodeDelete = function (nodeKey) {\n        delete this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.findRootId = function (id) {\n        return this.rootIds.indexOf(id);\n    };\n    MultiRootTree.prototype.findNodeId = function (nodeKey, id) {\n        return this.nodes[nodeKey].indexOf(id);\n    };\n    MultiRootTree.prototype.findNode = function (nodeKey) {\n        return this.nodes[nodeKey];\n    };\n    MultiRootTree.prototype.nodeInsertAtStart = function (nodeKey, id) {\n        this.nodes[nodeKey].unshift(id);\n    };\n    MultiRootTree.prototype.nodeInsertAtEnd = function (nodeKey, id) {\n        this.nodes[nodeKey].push(id);\n    };\n    MultiRootTree.prototype.rootDelete = function (index) {\n        this.rootIds.splice(index, 1);\n    };\n    MultiRootTree.prototype.nodeDeleteAtIndex = function (nodeKey, index) {\n        this.nodes[nodeKey].splice(index, 1);\n    };\n    MultiRootTree.prototype.rootInsertAtStart = function (id) {\n        this.rootIds.unshift(id);\n    };\n    MultiRootTree.prototype.rootInsertAtEnd = function (id) {\n        this.rootIds.push(id);\n    };\n    return MultiRootTree;\n}());\nexports.default = MultiRootTree;\n//# sourceMappingURL=MultiRootTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Copyright 2013 Basarat Ali Syed. All Rights Reserved.\n//\n// Licensed under MIT open source license http://opensource.org/licenses/MIT\n//\n// Orginal javascript code was by Mauricio Santos\n//\nvar _arrays = require(\"./arrays\");\nexports.arrays = _arrays;\nvar Bag_1 = require(\"./Bag\");\nexports.Bag = Bag_1.default;\nvar BSTree_1 = require(\"./BSTree\");\nexports.BSTree = BSTree_1.default;\nvar BSTreeKV_1 = require(\"./BSTreeKV\");\nexports.BSTreeKV = BSTreeKV_1.default;\nvar Dictionary_1 = require(\"./Dictionary\");\nexports.Dictionary = Dictionary_1.default;\nvar Heap_1 = require(\"./Heap\");\nexports.Heap = Heap_1.default;\nvar LinkedDictionary_1 = require(\"./LinkedDictionary\");\nexports.LinkedDictionary = LinkedDictionary_1.default;\nvar LinkedList_1 = require(\"./LinkedList\");\nexports.LinkedList = LinkedList_1.default;\nvar MultiDictionary_1 = require(\"./MultiDictionary\");\nexports.MultiDictionary = MultiDictionary_1.default;\nvar FactoryDictionary_1 = require(\"./FactoryDictionary\");\nexports.FactoryDictionary = FactoryDictionary_1.default;\nvar FactoryDictionary_2 = require(\"./FactoryDictionary\");\nexports.DefaultDictionary = FactoryDictionary_2.default;\nvar Queue_1 = require(\"./Queue\");\nexports.Queue = Queue_1.default;\nvar PriorityQueue_1 = require(\"./PriorityQueue\");\nexports.PriorityQueue = PriorityQueue_1.default;\nvar Set_1 = require(\"./Set\");\nexports.Set = Set_1.default;\nvar Stack_1 = require(\"./Stack\");\nexports.Stack = Stack_1.default;\nvar MultiRootTree_1 = require(\"./MultiRootTree\");\nexports.MultiRootTree = MultiRootTree_1.default;\nvar _util = require(\"./util\");\nexports.util = _util;\n//# sourceMappingURL=index.js.map","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","import { Dictionary, Set, PriorityQueue, BSTree } from 'typescript-collections';\nimport { Semigroup, concat } from 'sanctuary-type-classes';\n\nvar Entry = /** @class */ (function () {\r\n    function Entry(rank, action) {\r\n        this.rank = rank;\r\n        this.action = action;\r\n        this.seq = Entry.nextSeq++;\r\n    }\r\n    Entry.prototype.toString = function () {\r\n        return this.seq.toString();\r\n    };\r\n    Entry.nextSeq = 0;\r\n    return Entry;\r\n}());\r\nvar Transaction = /** @class */ (function () {\r\n    function Transaction() {\r\n        this.inCallback = 0;\r\n        this.toRegen = false;\r\n        this.prioritizedQ = new PriorityQueue(function (a, b) {\r\n            // Note: Low priority numbers are treated as \"greater\" according to this\r\n            // comparison, so that the lowest numbers are highest priority and go first.\r\n            if (a.rank.rank < b.rank.rank)\r\n                return 1;\r\n            if (a.rank.rank > b.rank.rank)\r\n                return -1;\r\n            if (a.seq < b.seq)\r\n                return 1;\r\n            if (a.seq > b.seq)\r\n                return -1;\r\n            return 0;\r\n        });\r\n        this.entries = new Set(function (a) { return a.toString(); });\r\n        this.sampleQ = [];\r\n        this.lastQ = [];\r\n        this.postQ = null;\r\n    }\r\n    Transaction.prototype.requestRegen = function () {\r\n        this.toRegen = true;\r\n    };\r\n    Transaction.prototype.prioritized = function (target, action) {\r\n        var e = new Entry(target, action);\r\n        this.prioritizedQ.enqueue(e);\r\n        this.entries.add(e);\r\n    };\r\n    Transaction.prototype.sample = function (h) {\r\n        this.sampleQ.push(h);\r\n    };\r\n    Transaction.prototype.last = function (h) {\r\n        this.lastQ.push(h);\r\n    };\r\n    Transaction._collectCyclesAtEnd = function () {\r\n        Transaction.run(function () { return Transaction.collectCyclesAtEnd = true; });\r\n    };\r\n    /**\r\n     * Add an action to run after all last() actions.\r\n     */\r\n    Transaction.prototype.post = function (childIx, action) {\r\n        if (this.postQ == null)\r\n            this.postQ = [];\r\n        // If an entry exists already, combine the old one with the new one.\r\n        while (this.postQ.length <= childIx)\r\n            this.postQ.push(null);\r\n        var existing = this.postQ[childIx], neu = existing === null ? action\r\n            : function () {\r\n                existing();\r\n                action();\r\n            };\r\n        this.postQ[childIx] = neu;\r\n    };\r\n    // If the priority queue has entries in it when we modify any of the nodes'\r\n    // ranks, then we need to re-generate it to make sure it's up-to-date.\r\n    Transaction.prototype.checkRegen = function () {\r\n        if (this.toRegen) {\r\n            this.toRegen = false;\r\n            this.prioritizedQ.clear();\r\n            var es = this.entries.toArray();\r\n            for (var i = 0; i < es.length; i++)\r\n                this.prioritizedQ.enqueue(es[i]);\r\n        }\r\n    };\r\n    Transaction.prototype.isActive = function () {\r\n        return Transaction.currentTransaction ? true : false;\r\n    };\r\n    Transaction.prototype.close = function () {\r\n        while (true) {\r\n            while (true) {\r\n                this.checkRegen();\r\n                if (this.prioritizedQ.isEmpty())\r\n                    break;\r\n                var e = this.prioritizedQ.dequeue();\r\n                this.entries.remove(e);\r\n                e.action();\r\n            }\r\n            var sq = this.sampleQ;\r\n            this.sampleQ = [];\r\n            for (var i = 0; i < sq.length; i++)\r\n                sq[i]();\r\n            if (this.prioritizedQ.isEmpty() && this.sampleQ.length < 1)\r\n                break;\r\n        }\r\n        for (var i = 0; i < this.lastQ.length; i++)\r\n            this.lastQ[i]();\r\n        this.lastQ = [];\r\n        if (this.postQ != null) {\r\n            for (var i = 0; i < this.postQ.length; i++) {\r\n                if (this.postQ[i] != null) {\r\n                    var parent_1 = Transaction.currentTransaction;\r\n                    try {\r\n                        if (i > 0) {\r\n                            Transaction.currentTransaction = new Transaction();\r\n                            try {\r\n                                this.postQ[i]();\r\n                                Transaction.currentTransaction.close();\r\n                            }\r\n                            catch (err) {\r\n                                Transaction.currentTransaction.close();\r\n                                throw err;\r\n                            }\r\n                        }\r\n                        else {\r\n                            Transaction.currentTransaction = null;\r\n                            this.postQ[i]();\r\n                        }\r\n                        Transaction.currentTransaction = parent_1;\r\n                    }\r\n                    catch (err) {\r\n                        Transaction.currentTransaction = parent_1;\r\n                        throw err;\r\n                    }\r\n                }\r\n            }\r\n            this.postQ = null;\r\n        }\r\n    };\r\n    /**\r\n     * Add a runnable that will be executed whenever a transaction is started.\r\n     * That runnable may start transactions itself, which will not cause the\r\n     * hooks to be run recursively.\r\n     *\r\n     * The main use case of this is the implementation of a time/alarm system.\r\n     */\r\n    Transaction.onStart = function (r) {\r\n        Transaction.onStartHooks.push(r);\r\n    };\r\n    Transaction.run = function (f) {\r\n        var transWas = Transaction.currentTransaction;\r\n        if (transWas === null) {\r\n            if (!Transaction.runningOnStartHooks) {\r\n                Transaction.runningOnStartHooks = true;\r\n                try {\r\n                    for (var i = 0; i < Transaction.onStartHooks.length; i++)\r\n                        Transaction.onStartHooks[i]();\r\n                }\r\n                finally {\r\n                    Transaction.runningOnStartHooks = false;\r\n                }\r\n            }\r\n            Transaction.currentTransaction = new Transaction();\r\n        }\r\n        try {\r\n            var a = f();\r\n            if (transWas === null) {\r\n                Transaction.currentTransaction.close();\r\n                Transaction.currentTransaction = null;\r\n                if (Transaction.collectCyclesAtEnd) {\r\n                    Vertex.collectCycles();\r\n                    Transaction.collectCyclesAtEnd = false;\r\n                }\r\n            }\r\n            return a;\r\n        }\r\n        catch (err) {\r\n            if (transWas === null) {\r\n                Transaction.currentTransaction.close();\r\n                Transaction.currentTransaction = null;\r\n            }\r\n            throw err;\r\n        }\r\n    };\r\n    Transaction.currentTransaction = null;\r\n    Transaction.onStartHooks = [];\r\n    Transaction.runningOnStartHooks = false;\r\n    Transaction.collectCyclesAtEnd = false;\r\n    return Transaction;\r\n}());\n\nvar totalRegistrations = 0;\r\nfunction getTotalRegistrations() {\r\n    return totalRegistrations;\r\n}\r\nvar Source = /** @class */ (function () {\r\n    // Note:\r\n    // When register_ == null, a rank-independent source is constructed (a vertex which is just kept alive for the\r\n    // lifetime of vertex that contains this source).\r\n    // When register_ != null it is likely to be a rank-dependent source, but this will depend on the code inside register_.\r\n    //\r\n    // rank-independent souces DO NOT bump up the rank of the vertex containing those sources.\r\n    // rank-depdendent sources DO bump up the rank of the vertex containing thoses sources when required.\r\n    function Source(origin, register_) {\r\n        this.registered = false;\r\n        this.deregister_ = null;\r\n        if (origin === null)\r\n            throw new Error(\"null origin!\");\r\n        this.origin = origin;\r\n        this.register_ = register_;\r\n    }\r\n    Source.prototype.register = function (target) {\r\n        var _this = this;\r\n        if (!this.registered) {\r\n            this.registered = true;\r\n            if (this.register_ !== null)\r\n                this.deregister_ = this.register_();\r\n            else {\r\n                // Note: The use of Vertex.NULL here instead of \"target\" is not a bug, this is done to create a\r\n                // rank-independent source. (see note at constructor for more details.). The origin vertex still gets\r\n                // added target vertex's children for the memory management algorithm.\r\n                this.origin.increment(Vertex.NULL);\r\n                target.childrn.push(this.origin);\r\n                this.deregister_ = function () {\r\n                    _this.origin.decrement(Vertex.NULL);\r\n                    for (var i = target.childrn.length - 1; i >= 0; --i) {\r\n                        if (target.childrn[i] === _this.origin) {\r\n                            target.childrn.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    };\r\n    Source.prototype.deregister = function (target) {\r\n        if (this.registered) {\r\n            this.registered = false;\r\n            if (this.deregister_ !== null)\r\n                this.deregister_();\r\n        }\r\n    };\r\n    return Source;\r\n}());\r\nvar Color;\r\n(function (Color) {\r\n    Color[Color[\"black\"] = 0] = \"black\";\r\n    Color[Color[\"gray\"] = 1] = \"gray\";\r\n    Color[Color[\"white\"] = 2] = \"white\";\r\n    Color[Color[\"purple\"] = 3] = \"purple\";\r\n})(Color || (Color = {}));\r\nvar roots = [];\r\nvar nextID = 0;\r\nvar verbose = false;\r\nvar Vertex = /** @class */ (function () {\r\n    function Vertex(name, rank, sources) {\r\n        this.targets = [];\r\n        this.childrn = [];\r\n        this.visited = false;\r\n        // --------------------------------------------------------\r\n        // Synchronous Cycle Collection algorithm presented in \"Concurrent\r\n        // Cycle Collection in Reference Counted Systems\" by David F. Bacon\r\n        // and V.T. Rajan.\r\n        this.color = Color.black;\r\n        this.buffered = false;\r\n        this.refCountAdj = 0;\r\n        this.name = name;\r\n        this.rank = rank;\r\n        this.sources = sources;\r\n        this.id = nextID++;\r\n    }\r\n    Vertex.prototype.refCount = function () { return this.targets.length; };\r\n    Vertex.prototype.register = function (target) {\r\n        return this.increment(target);\r\n    };\r\n    Vertex.prototype.deregister = function (target) {\r\n        if (verbose)\r\n            console.log(\"deregister \" + this.descr() + \" => \" + target.descr());\r\n        this.decrement(target);\r\n        Transaction._collectCyclesAtEnd();\r\n    };\r\n    Vertex.prototype.incRefCount = function (target) {\r\n        var anyChanged = false;\r\n        if (this.refCount() == 0) {\r\n            for (var i = 0; i < this.sources.length; i++)\r\n                this.sources[i].register(this);\r\n        }\r\n        this.targets.push(target);\r\n        target.childrn.push(this);\r\n        if (target.ensureBiggerThan(this.rank))\r\n            anyChanged = true;\r\n        totalRegistrations++;\r\n        return anyChanged;\r\n    };\r\n    Vertex.prototype.decRefCount = function (target) {\r\n        if (verbose)\r\n            console.log(\"DEC \" + this.descr());\r\n        var matched = false;\r\n        for (var i = target.childrn.length - 1; i >= 0; i--)\r\n            if (target.childrn[i] === this) {\r\n                target.childrn.splice(i, 1);\r\n                break;\r\n            }\r\n        for (var i = 0; i < this.targets.length; i++)\r\n            if (this.targets[i] === target) {\r\n                this.targets.splice(i, 1);\r\n                matched = true;\r\n                break;\r\n            }\r\n        if (matched) {\r\n            if (this.refCount() == 0) {\r\n                for (var i = 0; i < this.sources.length; i++)\r\n                    this.sources[i].deregister(this);\r\n            }\r\n            totalRegistrations--;\r\n        }\r\n    };\r\n    Vertex.prototype.addSource = function (src) {\r\n        this.sources.push(src);\r\n        if (this.refCount() > 0)\r\n            src.register(this);\r\n    };\r\n    Vertex.prototype.ensureBiggerThan = function (limit) {\r\n        if (this.visited) {\r\n            // Undoing cycle detection for now until TimerSystem.ts ranks are checked.\r\n            //throw new Error(\"Vertex cycle detected.\");\r\n            return false;\r\n        }\r\n        if (this.rank > limit)\r\n            return false;\r\n        this.visited = true;\r\n        this.rank = limit + 1;\r\n        for (var i = 0; i < this.targets.length; i++)\r\n            this.targets[i].ensureBiggerThan(this.rank);\r\n        this.visited = false;\r\n        return true;\r\n    };\r\n    Vertex.prototype.descr = function () {\r\n        var colStr = null;\r\n        switch (this.color) {\r\n            case Color.black:\r\n                colStr = \"black\";\r\n                break;\r\n            case Color.gray:\r\n                colStr = \"gray\";\r\n                break;\r\n            case Color.white:\r\n                colStr = \"white\";\r\n                break;\r\n            case Color.purple:\r\n                colStr = \"purple\";\r\n                break;\r\n        }\r\n        var str = this.id + \" \" + this.name + \" [\" + this.refCount() + \"/\" + this.refCountAdj + \"] \" + colStr + \" ->\";\r\n        var chs = this.children();\r\n        for (var i = 0; i < chs.length; i++) {\r\n            str = str + \" \" + chs[i].id;\r\n        }\r\n        return str;\r\n    };\r\n    Vertex.prototype.children = function () { return this.childrn; };\r\n    Vertex.prototype.increment = function (referrer) {\r\n        return this.incRefCount(referrer);\r\n    };\r\n    Vertex.prototype.decrement = function (referrer) {\r\n        this.decRefCount(referrer);\r\n        if (this.refCount() == 0)\r\n            this.release();\r\n        else\r\n            this.possibleRoots();\r\n    };\r\n    Vertex.prototype.release = function () {\r\n        this.color = Color.black;\r\n        if (!this.buffered)\r\n            this.free();\r\n    };\r\n    Vertex.prototype.free = function () {\r\n        while (this.targets.length > 0)\r\n            this.decRefCount(this.targets[0]);\r\n    };\r\n    Vertex.prototype.possibleRoots = function () {\r\n        if (this.color != Color.purple) {\r\n            this.color = Color.purple;\r\n            if (!this.buffered) {\r\n                this.buffered = true;\r\n                roots.push(this);\r\n            }\r\n        }\r\n    };\r\n    Vertex.collectCycles = function () {\r\n        if (Vertex.collectingCycles) {\r\n            return;\r\n        }\r\n        try {\r\n            Vertex.collectingCycles = true;\r\n            Vertex.markRoots();\r\n            Vertex.scanRoots();\r\n            Vertex.collectRoots();\r\n            for (var i = Vertex.toBeFreedList.length - 1; i >= 0; --i) {\r\n                var vertex = Vertex.toBeFreedList.splice(i, 1)[0];\r\n                vertex.free();\r\n            }\r\n        }\r\n        finally {\r\n            Vertex.collectingCycles = false;\r\n        }\r\n    };\r\n    Vertex.markRoots = function () {\r\n        var newRoots = [];\r\n        // check refCountAdj was restored to zero before mark roots\r\n        if (verbose) {\r\n            var stack = roots.slice(0);\r\n            var visited = new Set();\r\n            while (stack.length != 0) {\r\n                var vertex = stack.pop();\r\n                if (visited.contains(vertex.id)) {\r\n                    continue;\r\n                }\r\n                visited.add(vertex.id);\r\n                if (vertex.refCountAdj != 0) {\r\n                    console.log(\"markRoots(): reachable refCountAdj was not reset to zero: \" + vertex.descr());\r\n                }\r\n                for (var i = 0; i < vertex.childrn.length; ++i) {\r\n                    var child = vertex.childrn[i];\r\n                    stack.push(child);\r\n                }\r\n            }\r\n        }\r\n        //\r\n        for (var i = 0; i < roots.length; i++) {\r\n            if (verbose)\r\n                console.log(\"markRoots \" + roots[i].descr()); // ###\r\n            if (roots[i].color == Color.purple) {\r\n                roots[i].markGray();\r\n                newRoots.push(roots[i]);\r\n            }\r\n            else {\r\n                roots[i].buffered = false;\r\n                if (roots[i].color == Color.black && roots[i].refCount() == 0)\r\n                    Vertex.toBeFreedList.push(roots[i]);\r\n            }\r\n        }\r\n        roots = newRoots;\r\n    };\r\n    Vertex.scanRoots = function () {\r\n        for (var i = 0; i < roots.length; i++)\r\n            roots[i].scan();\r\n    };\r\n    Vertex.collectRoots = function () {\r\n        for (var i = 0; i < roots.length; i++) {\r\n            roots[i].buffered = false;\r\n            roots[i].collectWhite();\r\n        }\r\n        if (verbose) { // double check adjRefCount is zero for all vertices reachable by roots\r\n            var stack = roots.slice(0);\r\n            var visited = new Set();\r\n            while (stack.length != 0) {\r\n                var vertex = stack.pop();\r\n                if (visited.contains(vertex.id)) {\r\n                    continue;\r\n                }\r\n                visited.add(vertex.id);\r\n                if (vertex.refCountAdj != 0) {\r\n                    console.log(\"collectRoots(): reachable refCountAdj was not reset to zero: \" + vertex.descr());\r\n                }\r\n                for (var i = 0; i < vertex.childrn.length; ++i) {\r\n                    var child = vertex.childrn[i];\r\n                    stack.push(child);\r\n                }\r\n            }\r\n        }\r\n        roots = [];\r\n    };\r\n    Vertex.prototype.markGray = function () {\r\n        if (this.color != Color.gray) {\r\n            this.color = Color.gray;\r\n            var chs = this.children();\r\n            for (var i = 0; i < chs.length; i++) {\r\n                chs[i].refCountAdj--;\r\n                if (verbose)\r\n                    console.log(\"markGray \" + this.descr());\r\n                chs[i].markGray();\r\n            }\r\n        }\r\n    };\r\n    Vertex.prototype.scan = function () {\r\n        if (verbose)\r\n            console.log(\"scan \" + this.descr());\r\n        if (this.color == Color.gray) {\r\n            if (this.refCount() + this.refCountAdj > 0)\r\n                this.scanBlack();\r\n            else {\r\n                this.color = Color.white;\r\n                if (verbose)\r\n                    console.log(\"scan WHITE \" + this.descr());\r\n                var chs = this.children();\r\n                for (var i = 0; i < chs.length; i++)\r\n                    chs[i].scan();\r\n            }\r\n        }\r\n    };\r\n    Vertex.prototype.scanBlack = function () {\r\n        this.refCountAdj = 0;\r\n        this.color = Color.black;\r\n        var chs = this.children();\r\n        for (var i = 0; i < chs.length; i++) {\r\n            if (verbose)\r\n                console.log(\"scanBlack \" + this.descr());\r\n            if (chs[i].color != Color.black)\r\n                chs[i].scanBlack();\r\n        }\r\n    };\r\n    Vertex.prototype.collectWhite = function () {\r\n        if (this.color == Color.white && !this.buffered) {\r\n            if (verbose)\r\n                console.log(\"collectWhite \" + this.descr());\r\n            this.color = Color.black;\r\n            this.refCountAdj = 0;\r\n            var chs = this.children();\r\n            for (var i = 0; i < chs.length; i++)\r\n                chs[i].collectWhite();\r\n            Vertex.toBeFreedList.push(this);\r\n        }\r\n    };\r\n    Vertex.NULL = new Vertex(\"user\", 1e12, []);\r\n    Vertex.collectingCycles = false;\r\n    Vertex.toBeFreedList = [];\r\n    return Vertex;\r\n}());\n\nvar Lambda1 = /** @class */ (function () {\r\n    function Lambda1(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda1;\r\n}());\r\nfunction lambda1(f, deps) {\r\n    return new Lambda1(f, deps);\r\n}\r\nfunction Lambda1_deps(f) {\r\n    if (f instanceof Lambda1)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda1_toFunction(f) {\r\n    if (f instanceof Lambda1)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nvar Lambda2 = /** @class */ (function () {\r\n    function Lambda2(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda2;\r\n}());\r\nfunction lambda2(f, deps) {\r\n    return new Lambda2(f, deps);\r\n}\r\nfunction Lambda2_deps(f) {\r\n    if (f instanceof Lambda2)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda2_toFunction(f) {\r\n    if (f instanceof Lambda2)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nvar Lambda3 = /** @class */ (function () {\r\n    function Lambda3(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda3;\r\n}());\r\nfunction lambda3(f, deps) {\r\n    return new Lambda3(f, deps);\r\n}\r\nfunction Lambda3_deps(f) {\r\n    if (f instanceof Lambda3)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda3_toFunction(f) {\r\n    if (f instanceof Lambda3)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nvar Lambda4 = /** @class */ (function () {\r\n    function Lambda4(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda4;\r\n}());\r\nfunction lambda4(f, deps) {\r\n    return new Lambda4(f, deps);\r\n}\r\nfunction Lambda4_deps(f) {\r\n    if (f instanceof Lambda4)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda4_toFunction(f) {\r\n    if (f instanceof Lambda4)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nvar Lambda5 = /** @class */ (function () {\r\n    function Lambda5(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda5;\r\n}());\r\nfunction lambda5(f, deps) {\r\n    return new Lambda5(f, deps);\r\n}\r\nfunction Lambda5_deps(f) {\r\n    if (f instanceof Lambda5)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda5_toFunction(f) {\r\n    if (f instanceof Lambda5)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nvar Lambda6 = /** @class */ (function () {\r\n    function Lambda6(f, deps) {\r\n        this.f = f;\r\n        this.deps = deps;\r\n    }\r\n    return Lambda6;\r\n}());\r\nfunction lambda6(f, deps) {\r\n    return new Lambda6(f, deps);\r\n}\r\nfunction Lambda6_deps(f) {\r\n    if (f instanceof Lambda6)\r\n        return f.deps;\r\n    else\r\n        return [];\r\n}\r\nfunction Lambda6_toFunction(f) {\r\n    if (f instanceof Lambda6)\r\n        return f.f;\r\n    else\r\n        return f;\r\n}\r\nfunction toSources(deps) {\r\n    var ss = [];\r\n    for (var i = 0; i < deps.length; i++) {\r\n        var dep = deps[i];\r\n        ss.push(new Source(dep.getVertex__(), null));\r\n    }\r\n    return ss;\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n/**\r\n * A representation for a value that may not be available until the current\r\n * transaction is closed.\r\n */\r\nvar Lazy = /** @class */ (function () {\r\n    function Lazy(f) {\r\n        this.f = f;\r\n    }\r\n    /**\r\n     * Get the value if available, throwing an exception if not.\r\n     * In the general case this should only be used in subsequent transactions to\r\n     * when the Lazy was obtained.\r\n     */\r\n    Lazy.prototype.get = function () {\r\n        return this.f();\r\n    };\r\n    /**\r\n     * Map the lazy value according to the specified function, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazy's value.\r\n     * @param f Function to apply to the contained value. It must be <em>referentially transparent</em>.\r\n     */\r\n    Lazy.prototype.map = function (f) {\r\n        var _this = this;\r\n        return new Lazy(function () { return f(_this.f()); });\r\n    };\r\n    /**\r\n     * Lift a binary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n     */\r\n    Lazy.prototype.lift = function (b, f) {\r\n        var _this = this;\r\n        return new Lazy(function () { return f(_this.f(), b.f()); });\r\n    };\r\n    /**\r\n     * Lift a ternary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n     */\r\n    Lazy.prototype.lift3 = function (b, c, f) {\r\n        var _this = this;\r\n        return new Lazy(function () { return f(_this.f(), b.f(), c.f()); });\r\n    };\r\n    /**\r\n     * Lift a quaternary function into lazy values, so the returned Lazy reflects\r\n     * the value of the function applied to the input Lazys' values.\r\n     */\r\n    Lazy.prototype.lift4 = function (b, c, d, f) {\r\n        var _this = this;\r\n        return new Lazy(function () { return f(_this.f(), b.f(), c.f(), d.f()); });\r\n    };\r\n    return Lazy;\r\n}());\n\nvar Unit = /** @class */ (function () {\r\n    function Unit() {\r\n    }\r\n    Unit.UNIT = new Unit();\r\n    return Unit;\r\n}());\n\nvar Operational = /** @class */ (function () {\r\n    function Operational() {\r\n    }\r\n    /**\r\n     * A stream that gives the updates/steps for a {@link Cell}.\r\n     * <P>\r\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n     * API. It breaks the property of non-detectability of cell steps/updates.\r\n     * The rule with this primitive is that you should only use it in functions\r\n     * that do not allow the caller to detect the cell updates.\r\n     */\r\n    Operational.updates = function (c) {\r\n        /*  Don't think this is needed\r\n        const out = new StreamWithSend<A>(null);\r\n        out.setVertex__(new Vertex(\"updates\", 0, [\r\n                new Source(\r\n                    c.getStream__().getVertex__(),\r\n                    () => {\r\n                        return c.getStream__().listen_(out.getVertex__(), (a : A) => {\r\n                            out.send_(a);\r\n                        }, false);\r\n                    }\r\n                ),\r\n                new Source(\r\n                    c.getVertex__(),\r\n                    () => {\r\n                        return () => { };\r\n                    }\r\n                )\r\n            ]\r\n        ));\r\n        return out;\r\n        */\r\n        return c.getStream__();\r\n    };\r\n    /**\r\n     * A stream that is guaranteed to fire once in the transaction where value() is invoked, giving\r\n     * the current value of the cell, and thereafter behaves like {@link updates(Cell)},\r\n     * firing for each update/step of the cell's value.\r\n     * <P>\r\n     * This is an OPERATIONAL primitive, which is not part of the main Sodium\r\n     * API. It breaks the property of non-detectability of cell steps/updates.\r\n     * The rule with this primitive is that you should only use it in functions\r\n     * that do not allow the caller to detect the cell updates.\r\n     */\r\n    Operational.value = function (c) {\r\n        return Transaction.run(function () {\r\n            var sSpark = new StreamWithSend();\r\n            Transaction.currentTransaction.prioritized(sSpark.getVertex__(), function () {\r\n                sSpark.send_(Unit.UNIT);\r\n            });\r\n            var sInitial = sSpark.snapshot1(c);\r\n            return Operational.updates(c).orElse(sInitial);\r\n        });\r\n    };\r\n    /**\r\n     * Push each event onto a new transaction guaranteed to come before the next externally\r\n     * initiated transaction. Same as {@link split(Stream)} but it works on a single value.\r\n     */\r\n    Operational.defer = function (s) {\r\n        return Operational.split(s.map(function (a) {\r\n            return [a];\r\n        }));\r\n    };\r\n    /**\r\n     * Push each event in the list onto a newly created transaction guaranteed\r\n     * to come before the next externally initiated transaction. Note that the semantics\r\n     * are such that two different invocations of split() can put events into the same\r\n     * new transaction, so the resulting stream's events could be simultaneous with\r\n     * events output by split() or {@link defer(Stream)} invoked elsewhere in the code.\r\n     */\r\n    Operational.split = function (s) {\r\n        var out = new StreamWithSend(null);\r\n        out.setVertex__(new Vertex(\"split\", 0, [\r\n            new Source(s.getVertex__(), function () {\r\n                out.getVertex__().childrn.push(s.getVertex__());\r\n                var cleanups = [];\r\n                cleanups.push(s.listen_(Vertex.NULL, function (as) {\r\n                    var _loop_1 = function (i) {\r\n                        Transaction.currentTransaction.post(i, function () {\r\n                            Transaction.run(function () {\r\n                                out.send_(as[i]);\r\n                            });\r\n                        });\r\n                    };\r\n                    for (var i = 0; i < as.length; i++) {\r\n                        _loop_1(i);\r\n                    }\r\n                }, false));\r\n                cleanups.push(function () {\r\n                    var chs = out.getVertex__().childrn;\r\n                    for (var i = chs.length - 1; i >= 0; --i) {\r\n                        if (chs[i] == s.getVertex__()) {\r\n                            chs.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                });\r\n                return function () {\r\n                    cleanups.forEach(function (cleanup) { return cleanup(); });\r\n                    cleanups.splice(0, cleanups.length);\r\n                };\r\n            })\r\n        ]));\r\n        return out;\r\n    };\r\n    return Operational;\r\n}());\n\nvar Tuple2 = /** @class */ (function () {\r\n    function Tuple2(a, b) {\r\n        this.a = a;\r\n        this.b = b;\r\n    }\r\n    return Tuple2;\r\n}());\n\nvar LazySample = /** @class */ (function () {\r\n    function LazySample(cell) {\r\n        this.hasValue = false;\r\n        this.value = null;\r\n        this.cell = cell;\r\n    }\r\n    return LazySample;\r\n}());\r\nvar ApplyState = /** @class */ (function () {\r\n    function ApplyState() {\r\n        this.f = null;\r\n        this.f_present = false;\r\n        this.a = null;\r\n        this.a_present = false;\r\n    }\r\n    return ApplyState;\r\n}());\r\nvar Cell = /** @class */ (function () {\r\n    function Cell(initValue, str) {\r\n        var _this = this;\r\n        this.value = initValue;\r\n        if (!str) {\r\n            this.str = new Stream();\r\n            this.vertex = new Vertex(\"ConstCell\", 0, []);\r\n        }\r\n        else\r\n            Transaction.run(function () { return _this.setStream(str); });\r\n    }\r\n    Cell.prototype.setStream = function (str) {\r\n        var _this = this;\r\n        this.str = str;\r\n        var me = this, src = new Source(str.getVertex__(), function () {\r\n            return str.listen_(me.vertex, function (a) {\r\n                if (me.valueUpdate == null) {\r\n                    Transaction.currentTransaction.last(function () {\r\n                        me.value = me.valueUpdate;\r\n                        me.lazyInitValue = null;\r\n                        me.valueUpdate = null;\r\n                    });\r\n                }\r\n                me.valueUpdate = a;\r\n            }, false);\r\n        });\r\n        this.vertex = new Vertex(\"Cell\", 0, [src]);\r\n        // We do a trick here of registering the source for the duration of the current\r\n        // transaction so that we are guaranteed to catch any stream events that\r\n        // occur in the same transaction.\r\n        //\r\n        // A new temporary vertex null is constructed here as a performance work-around to avoid\r\n        // having too many children in Vertex.NULL as a deregister operation is O(n^2) where\r\n        // n is the number of children in the vertex.\r\n        var tmpVertexNULL = new Vertex(\"Cell::setStream\", 1e12, []);\r\n        this.vertex.register(tmpVertexNULL);\r\n        Transaction.currentTransaction.last(function () {\r\n            _this.vertex.deregister(tmpVertexNULL);\r\n        });\r\n    };\r\n    Cell.prototype.getVertex__ = function () {\r\n        return this.vertex;\r\n    };\r\n    Cell.prototype.getStream__ = function () {\r\n        return this.str;\r\n    };\r\n    /**\r\n     * Sample the cell's current value.\r\n     * <p>\r\n     * It should generally be avoided in favour of {@link listen(Handler)} so you don't\r\n     * miss any updates, but in many circumstances it makes sense.\r\n     * <p>\r\n     * NOTE: In the Java and other versions of Sodium, using sample() inside map(), filter() and\r\n     * merge() is encouraged. In the Javascript/Typescript version, not so much, for the\r\n     * following reason: The memory management is different in the Javascript version, and this\r\n     * requires us to track all dependencies. In order for the use of sample() inside\r\n     * a closure to be correct, the cell that was sample()d inside the closure would have to be\r\n     * declared explicitly using the helpers lambda1(), lambda2(), etc. Because this is\r\n     * something that can be got wrong, we don't encourage this kind of use of sample() in\r\n     * Javascript. Better and simpler to use snapshot().\r\n     * <p>\r\n     * NOTE: If you need to sample() a cell, you have to make sure it's \"alive\" in terms of\r\n     * memory management or it will ignore updates. To make a cell work correctly\r\n     * with sample(), you have to ensure that it's being used. One way to guarantee this is\r\n     * to register a dummy listener on the cell. It will also work to have it referenced\r\n     * by something that is ultimately being listened to.\r\n     */\r\n    Cell.prototype.sample = function () {\r\n        var _this = this;\r\n        return Transaction.run(function () { return _this.sampleNoTrans__(); });\r\n    };\r\n    Cell.prototype.sampleNoTrans__ = function () {\r\n        return this.value;\r\n    };\r\n    /**\r\n     * A variant of {@link sample()} that works with {@link CellLoop}s when they haven't been looped yet.\r\n     * It should be used in any code that's general enough that it could be passed a {@link CellLoop}.\r\n     * @see Stream#holdLazy(Lazy) Stream.holdLazy()\r\n     */\r\n    Cell.prototype.sampleLazy = function () {\r\n        var me = this;\r\n        return Transaction.run(function () { return me.sampleLazyNoTrans__(); });\r\n    };\r\n    Cell.prototype.sampleLazyNoTrans__ = function () {\r\n        var me = this, s = new LazySample(me);\r\n        Transaction.currentTransaction.sample(function () {\r\n            s.value = me.valueUpdate != null ? me.valueUpdate : me.sampleNoTrans__();\r\n            s.hasValue = true;\r\n            s.cell = null;\r\n        });\r\n        return new Lazy(function () {\r\n            if (s.hasValue)\r\n                return s.value;\r\n            else\r\n                return s.cell.sample();\r\n        });\r\n    };\r\n    /**\r\n     * Transform the cell's value according to the supplied function, so the returned Cell\r\n     * always reflects the value of the function applied to the input Cell's value.\r\n     * @param f Function to apply to convert the values. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.map = function (f) {\r\n        var c = this;\r\n        return Transaction.run(function () {\r\n            return Operational.updates(c).map(f).holdLazy(c.sampleLazy().map(Lambda1_toFunction(f)));\r\n        });\r\n    };\r\n    /**\r\n     * Lift a binary function into cells, so the returned Cell always reflects the specified\r\n     * function applied to the input cells' values.\r\n     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.lift = function (b, fn0) {\r\n        var fn = Lambda2_toFunction(fn0), cf = this.map(function (aa) { return function (bb) { return fn(aa, bb); }; });\r\n        return Cell.apply(cf, b, toSources(Lambda2_deps(fn0)));\r\n    };\r\n    /**\r\n     * Lift a ternary function into cells, so the returned Cell always reflects the specified\r\n     * function applied to the input cells' values.\r\n     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.lift3 = function (b, c, fn0) {\r\n        var fn = Lambda3_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return fn(aa, bb, cc); }; }; }, cf = this.map(mf);\r\n        return Cell.apply(Cell.apply(cf, b), c, toSources(Lambda3_deps(fn0)));\r\n    };\r\n    /**\r\n     * Lift a quaternary function into cells, so the returned Cell always reflects the specified\r\n     * function applied to the input cells' values.\r\n     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.lift4 = function (b, c, d, fn0) {\r\n        var fn = Lambda4_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return fn(aa, bb, cc, dd); }; }; }; }, cf = this.map(mf);\r\n        return Cell.apply(Cell.apply(Cell.apply(cf, b), c), d, toSources(Lambda4_deps(fn0)));\r\n    };\r\n    /**\r\n     * Lift a 5-argument function into cells, so the returned Cell always reflects the specified\r\n     * function applied to the input cells' values.\r\n     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.lift5 = function (b, c, d, e, fn0) {\r\n        var fn = Lambda5_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return function (ee) { return fn(aa, bb, cc, dd, ee); }; }; }; }; }, cf = this.map(mf);\r\n        return Cell.apply(Cell.apply(Cell.apply(Cell.apply(cf, b), c), d), e, toSources(Lambda5_deps(fn0)));\r\n    };\r\n    /**\r\n     * Lift a 6-argument function into cells, so the returned Cell always reflects the specified\r\n     * function applied to the input cells' values.\r\n     * @param fn Function to apply. It must be <em>referentially transparent</em>.\r\n     */\r\n    Cell.prototype.lift6 = function (b, c, d, e, f, fn0) {\r\n        var fn = Lambda6_toFunction(fn0), mf = function (aa) { return function (bb) { return function (cc) { return function (dd) { return function (ee) { return function (ff) { return fn(aa, bb, cc, dd, ee, ff); }; }; }; }; }; }, cf = this.map(mf);\r\n        return Cell.apply(Cell.apply(Cell.apply(Cell.apply(Cell.apply(cf, b), c), d), e), f, toSources(Lambda6_deps(fn0)));\r\n    };\r\n    /**\r\n     * High order depenency traking. If any newly created sodium objects within a value of a cell of a sodium object\r\n     * happen to accumulate state, this method will keep the accumulation of state up to date.\r\n     */\r\n    Cell.prototype.tracking = function (extractor) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var vertex = new Vertex(\"tracking\", 0, [\r\n            new Source(this.vertex, function () {\r\n                var cleanup2 = function () { };\r\n                var updateDeps = function (a) {\r\n                    var lastCleanups2 = cleanup2;\r\n                    var deps = extractor(a).map(function (dep) { return dep.getVertex__(); });\r\n                    for (var i = 0; i < deps.length; ++i) {\r\n                        var dep = deps[i];\r\n                        vertex.childrn.push(dep);\r\n                        dep.increment(Vertex.NULL);\r\n                    }\r\n                    cleanup2 = function () {\r\n                        for (var i = 0; i < deps.length; ++i) {\r\n                            var dep = deps[i];\r\n                            for (var j = 0; j < vertex.childrn.length; ++j) {\r\n                                if (vertex.childrn[j] === dep) {\r\n                                    vertex.childrn.splice(j, 1);\r\n                                    break;\r\n                                }\r\n                            }\r\n                            dep.decrement(Vertex.NULL);\r\n                        }\r\n                    };\r\n                    lastCleanups2();\r\n                };\r\n                updateDeps(_this.sample());\r\n                var cleanup1 = Operational.updates(_this).listen_(vertex, function (a) {\r\n                    updateDeps(a);\r\n                    out.send_(a);\r\n                }, false);\r\n                return function () {\r\n                    cleanup1();\r\n                    cleanup2();\r\n                };\r\n            })\r\n        ]);\r\n        out.setVertex__(vertex);\r\n        return out.holdLazy(this.sampleLazy());\r\n    };\r\n    /**\r\n     * Lift an array of cells into a cell of an array.\r\n     */\r\n    Cell.liftArray = function (ca) {\r\n        return Cell._liftArray(ca, 0, ca.length);\r\n    };\r\n    Cell._liftArray = function (ca, fromInc, toExc) {\r\n        if (toExc - fromInc == 0) {\r\n            return new Cell([]);\r\n        }\r\n        else if (toExc - fromInc == 1) {\r\n            return ca[fromInc].map(function (a) { return [a]; });\r\n        }\r\n        else {\r\n            var pivot = Math.floor((fromInc + toExc) / 2);\r\n            // the thunk boxing/unboxing here is a performance hack for lift when there are simutaneous changing cells.\r\n            return Cell._liftArray(ca, fromInc, pivot).lift(Cell._liftArray(ca, pivot, toExc), function (array1, array2) { return function () { return array1.concat(array2); }; })\r\n                .map(function (x) { return x(); });\r\n        }\r\n    };\r\n    /**\r\n     * Apply a value inside a cell to a function inside a cell. This is the\r\n     * primitive for all function lifting.\r\n     */\r\n    Cell.apply = function (cf, ca, sources) {\r\n        return Transaction.run(function () {\r\n            var pumping = false;\r\n            var state = new ApplyState(), out = new StreamWithSend(), cf_updates = Operational.updates(cf), ca_updates = Operational.updates(ca), pump = function () {\r\n                if (pumping) {\r\n                    return;\r\n                }\r\n                pumping = true;\r\n                Transaction.currentTransaction.prioritized(out.getVertex__(), function () {\r\n                    var f = state.f_present ? state.f : cf.sampleNoTrans__();\r\n                    var a = state.a_present ? state.a : ca.sampleNoTrans__();\r\n                    out.send_(f(a));\r\n                    pumping = false;\r\n                });\r\n            }, src1 = new Source(cf_updates.getVertex__(), function () {\r\n                return cf_updates.listen_(out.getVertex__(), function (f) {\r\n                    state.f = f;\r\n                    state.f_present = true;\r\n                    pump();\r\n                }, false);\r\n            }), src2 = new Source(ca_updates.getVertex__(), function () {\r\n                return ca_updates.listen_(out.getVertex__(), function (a) {\r\n                    state.a = a;\r\n                    state.a_present = true;\r\n                    pump();\r\n                }, false);\r\n            });\r\n            out.setVertex__(new Vertex(\"apply\", 0, [src1, src2].concat(sources ? sources : [])));\r\n            return out.holdLazy(new Lazy(function () {\r\n                return cf.sampleNoTrans__()(ca.sampleNoTrans__());\r\n            }));\r\n        });\r\n    };\r\n    /**\r\n     * Unwrap a cell inside another cell to give a time-varying cell implementation.\r\n     */\r\n    Cell.switchC = function (cca) {\r\n        return Transaction.run(function () {\r\n            var za = cca.sampleLazy().map(function (ba) { return ba.sample(); }), out = new StreamWithSend();\r\n            var outValue = null;\r\n            var pumping = false;\r\n            var pump = function () {\r\n                if (pumping) {\r\n                    return;\r\n                }\r\n                pumping = true;\r\n                Transaction.currentTransaction.prioritized(out.getVertex__(), function () {\r\n                    out.send_(outValue);\r\n                    outValue = null;\r\n                    pumping = false;\r\n                });\r\n            };\r\n            var last_ca = null;\r\n            var cca_value = Operational.value(cca), src = new Source(cca_value.getVertex__(), function () {\r\n                var kill2 = last_ca === null ? null :\r\n                    Operational.value(last_ca).listen_(out.getVertex__(), function (a) { outValue = a; pump(); }, false);\r\n                var kill1 = cca_value.listen_(out.getVertex__(), function (ca) {\r\n                    last_ca = ca;\r\n                    // Connect before disconnect to avoid memory bounce, when switching to same cell twice.\r\n                    var nextKill2 = Operational.value(ca).listen_(out.getVertex__(), function (a) {\r\n                        outValue = a;\r\n                        pump();\r\n                    }, false);\r\n                    if (kill2 !== null)\r\n                        kill2();\r\n                    kill2 = nextKill2;\r\n                }, false);\r\n                return function () { kill1(); kill2(); };\r\n            });\r\n            out.setVertex__(new Vertex(\"switchC\", 0, [src]));\r\n            return out.holdLazy(za);\r\n        });\r\n    };\r\n    /**\r\n     * Unwrap a stream inside a cell to give a time-varying stream implementation.\r\n     */\r\n    Cell.switchS = function (csa) {\r\n        return Transaction.run(function () {\r\n            var out = new StreamWithSend(), h2 = function (a) {\r\n                out.send_(a);\r\n            }, src = new Source(csa.getVertex__(), function () {\r\n                var kill2 = csa.sampleNoTrans__().listen_(out.getVertex__(), h2, false);\r\n                var kill1 = csa.getStream__().listen_(out.getVertex__(), function (sa) {\r\n                    // Connect before disconnect to avoid memory bounce, when switching to same stream twice.\r\n                    var nextKill2 = sa.listen_(out.getVertex__(), h2, true);\r\n                    kill2();\r\n                    kill2 = nextKill2;\r\n                }, false);\r\n                return function () { kill1(); kill2(); };\r\n            });\r\n            out.setVertex__(new Vertex(\"switchS\", 0, [src]));\r\n            return out;\r\n        });\r\n    };\r\n    /**\r\n     * When transforming a value from a larger type to a smaller type, it is likely for duplicate changes to become\r\n     * propergated. This function insures only distinct changes get propergated.\r\n     */\r\n    Cell.prototype.calm = function (eq) {\r\n        return Operational\r\n            .updates(this)\r\n            .collectLazy(this.sampleLazy(), function (newValue, oldValue) {\r\n            var result;\r\n            if (eq(newValue, oldValue)) {\r\n                result = null;\r\n            }\r\n            else {\r\n                result = newValue;\r\n            }\r\n            return new Tuple2(result, newValue);\r\n        })\r\n            .filterNotNull()\r\n            .holdLazy(this.sampleLazy());\r\n    };\r\n    /**\r\n     * This function is the same as calm, except you do not need to pass an eq function. This function will use (===)\r\n     * as its eq function. I.E. calling calmRefEq() is the same as calm((a,b) => a === b).\r\n     */\r\n    Cell.prototype.calmRefEq = function () {\r\n        return this.calm(function (a, b) { return a === b; });\r\n    };\r\n    /**\r\n     * Listen for updates to the value of this cell. This is the observer pattern. The\r\n     * returned {@link Listener} has a {@link Listener#unlisten()} method to cause the\r\n     * listener to be removed. This is an OPERATIONAL mechanism is for interfacing between\r\n     * the world of I/O and for FRP.\r\n     * @param h The handler to execute when there's a new value.\r\n     *   You should make no assumptions about what thread you are called on, and the\r\n     *   handler should not block. You are not allowed to use {@link CellSink#send(Object)}\r\n     *   or {@link StreamSink#send(Object)} in the handler.\r\n     *   An exception will be thrown, because you are not meant to use this to create\r\n     *   your own primitives.\r\n     */\r\n    Cell.prototype.listen = function (h) {\r\n        var _this = this;\r\n        return Transaction.run(function () {\r\n            return Operational.value(_this).listen(h);\r\n        });\r\n    };\r\n    /**\r\n     * Fantasy-land Algebraic Data Type Compatability.\r\n     * Cell satisfies the Functor, Apply, Applicative categories\r\n     * @see {@link https://github.com/fantasyland/fantasy-land} for more info\r\n     */\r\n    //of :: Applicative f => a -> f a\r\n    Cell['fantasy-land/of'] = function (a) {\r\n        return new Cell(a);\r\n    };\r\n    //map :: Functor f => f a ~> (a -> b) -> f b\r\n    Cell.prototype['fantasy-land/map'] = function (f) {\r\n        return this.map(f);\r\n    };\r\n    //ap :: Apply f => f a ~> f (a -> b) -> f b\r\n    Cell.prototype['fantasy-land/ap'] = function (cf) {\r\n        return Cell.apply(cf, this);\r\n    };\r\n    return Cell;\r\n}());\n\nvar Listener = /** @class */ (function () {\r\n    function Listener(h, target) {\r\n        this.h = h;\r\n        this.target = target;\r\n    }\r\n    return Listener;\r\n}());\n\nvar LazyCell = /** @class */ (function (_super) {\r\n    __extends(LazyCell, _super);\r\n    function LazyCell(lazyInitValue, str) {\r\n        var _this = _super.call(this, null, null) || this;\r\n        Transaction.run(function () {\r\n            if (str)\r\n                _this.setStream(str);\r\n            _this.lazyInitValue = lazyInitValue;\r\n        });\r\n        return _this;\r\n    }\r\n    LazyCell.prototype.sampleNoTrans__ = function () {\r\n        if (this.value == null && this.lazyInitValue != null) {\r\n            this.value = this.lazyInitValue.get();\r\n            this.lazyInitValue = null;\r\n        }\r\n        return this.value;\r\n    };\r\n    return LazyCell;\r\n}(Cell));\n\nvar MergeState = /** @class */ (function () {\r\n    function MergeState() {\r\n        this.left = null;\r\n        this.left_present = false;\r\n        this.right = null;\r\n        this.right_present = false;\r\n    }\r\n    return MergeState;\r\n}());\r\nvar Stream = /** @class */ (function () {\r\n    function Stream(vertex) {\r\n        this.listeners = [];\r\n        this.firings = [];\r\n        this.vertex = vertex ? vertex : new Vertex(\"Stream\", 0, []);\r\n    }\r\n    Stream.prototype.getVertex__ = function () {\r\n        return this.vertex;\r\n    };\r\n    /**\r\n     * Transform the stream's event values according to the supplied function, so the returned\r\n     * Stream's event values reflect the value of the function applied to the input\r\n     * Stream's event values.\r\n     * @param f Function to apply to convert the values. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    Stream.prototype.map = function (f) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda1_toFunction(f);\r\n        out.vertex = new Vertex(\"map\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a));\r\n                }, false);\r\n            })\r\n        ].concat(toSources(Lambda1_deps(f))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Transform the stream's event values into the specified constant value.\r\n     * @param b Constant value.\r\n     */\r\n    Stream.prototype.mapTo = function (b) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        out.vertex = new Vertex(\"mapTo\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(b);\r\n                }, false);\r\n            })\r\n        ]);\r\n        return out;\r\n    };\r\n    /**\r\n     * Variant of {@link Stream#merge(Stream, Lambda2)} that merges two streams and will drop an event\r\n     * in the simultaneous case.\r\n     * <p>\r\n     * In the case where two events are simultaneous (i.e. both\r\n     * within the same transaction), the event from <em>this</em> will take precedence, and\r\n     * the event from <em>s</em> will be dropped.\r\n     * If you want to specify your own combining function, use {@link Stream#merge(Stream, Lambda2)}.\r\n     * s1.orElse(s2) is equivalent to s1.merge(s2, (l, r) -&gt; l).\r\n     * <p>\r\n     * The name orElse() is used instead of merge() to make it really clear that care should\r\n     * be taken, because events can be dropped.\r\n     */\r\n    Stream.prototype.orElse = function (s) {\r\n        return this.merge(s, function (left, right) {\r\n            return left;\r\n        });\r\n    };\r\n    /**\r\n     * Merge two streams of the same type into one, so that events on either input appear\r\n     * on the returned stream.\r\n     * <p>\r\n     * If the events are simultaneous (that is, one event from this and one from <em>s</em>\r\n     * occurring in the same transaction), combine them into one using the specified combining function\r\n     * so that the returned stream is guaranteed only ever to have one event per transaction.\r\n     * The event from <em>this</em> will appear at the left input of the combining function, and\r\n     * the event from <em>s</em> will appear at the right.\r\n     * @param f Function to combine the values. It may construct FRP logic or use\r\n     *    {@link Cell#sample()}. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    Stream.prototype.merge = function (s, f) {\r\n        var _this = this;\r\n        var ff = Lambda2_toFunction(f);\r\n        var mergeState = new MergeState();\r\n        var pumping = false;\r\n        var out = new StreamWithSend(null);\r\n        var pump = function () {\r\n            if (pumping) {\r\n                return;\r\n            }\r\n            pumping = true;\r\n            Transaction.currentTransaction.prioritized(out.getVertex__(), function () {\r\n                if (mergeState.left_present && mergeState.right_present) {\r\n                    out.send_(ff(mergeState.left, mergeState.right));\r\n                }\r\n                else if (mergeState.left_present) {\r\n                    out.send_(mergeState.left);\r\n                }\r\n                else if (mergeState.right_present) {\r\n                    out.send_(mergeState.right);\r\n                }\r\n                mergeState.left = null;\r\n                mergeState.left_present = false;\r\n                mergeState.right = null;\r\n                mergeState.right_present = false;\r\n                pumping = false;\r\n            });\r\n        };\r\n        var vertex = new Vertex(\"merge\", 0, [\r\n            new Source(this.vertex, function () { return _this.listen_(out.vertex, function (a) {\r\n                mergeState.left = a;\r\n                mergeState.left_present = true;\r\n                pump();\r\n            }, false); }),\r\n            new Source(s.vertex, function () { return s.listen_(out.vertex, function (a) {\r\n                mergeState.right = a;\r\n                mergeState.right_present = true;\r\n                pump();\r\n            }, false); })\r\n        ].concat(toSources(Lambda2_deps(f))));\r\n        out.vertex = vertex;\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream that only outputs events for which the predicate returns true.\r\n     */\r\n    Stream.prototype.filter = function (f) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda1_toFunction(f);\r\n        out.vertex = new Vertex(\"filter\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    if (ff(a))\r\n                        out.send_(a);\r\n                }, false);\r\n            })\r\n        ].concat(toSources(Lambda1_deps(f))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream that only outputs events that have present\r\n     * values, discarding null values.\r\n     */\r\n    Stream.prototype.filterNotNull = function () {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        out.vertex = new Vertex(\"filterNotNull\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    if (a !== null)\r\n                        out.send_(a);\r\n                }, false);\r\n            })\r\n        ]);\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream that only outputs events from the input stream\r\n     * when the specified cell's value is true.\r\n     */\r\n    Stream.prototype.gate = function (c) {\r\n        return this.snapshot(c, function (a, pred) {\r\n            return pred ? a : null;\r\n        }).filterNotNull();\r\n    };\r\n    /**\r\n     * Variant of {@link snapshot(Cell, Lambda2)} that captures the cell's value\r\n     * at the time of the event firing, ignoring the stream's value.\r\n     */\r\n    Stream.prototype.snapshot1 = function (c) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        out.vertex = new Vertex(\"snapshot1\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(c.sampleNoTrans__());\r\n                }, false);\r\n            }),\r\n            new Source(c.getVertex__(), null)\r\n        ]);\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream whose events are the result of the combination using the specified\r\n     * function of the input stream's event value and the value of the cell at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, {@link Stream#snapshot(Cell, Lambda2)}\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n    Stream.prototype.snapshot = function (b, f_) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda2_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a, b.sampleNoTrans__()));\r\n                }, false);\r\n            }),\r\n            new Source(b.getVertex__(), null)\r\n        ].concat(toSources(Lambda2_deps(f_))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream whose events are the result of the combination using the specified\r\n     * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n    Stream.prototype.snapshot3 = function (b, c, f_) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda3_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__()));\r\n                }, false);\r\n            }),\r\n            new Source(b.getVertex__(), null),\r\n            new Source(c.getVertex__(), null)\r\n        ].concat(toSources(Lambda3_deps(f_))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream whose events are the result of the combination using the specified\r\n     * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n    Stream.prototype.snapshot4 = function (b, c, d, f_) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda4_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(), d.sampleNoTrans__()));\r\n                }, false);\r\n            }),\r\n            new Source(b.getVertex__(), null),\r\n            new Source(c.getVertex__(), null),\r\n            new Source(d.getVertex__(), null)\r\n        ].concat(toSources(Lambda4_deps(f_))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream whose events are the result of the combination using the specified\r\n     * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n    Stream.prototype.snapshot5 = function (b, c, d, e, f_) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda5_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(), d.sampleNoTrans__(), e.sampleNoTrans__()));\r\n                }, false);\r\n            }),\r\n            new Source(b.getVertex__(), null),\r\n            new Source(c.getVertex__(), null),\r\n            new Source(d.getVertex__(), null),\r\n            new Source(e.getVertex__(), null)\r\n        ].concat(toSources(Lambda5_deps(f_))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Return a stream whose events are the result of the combination using the specified\r\n     * function of the input stream's event value and the value of the cells at that time.\r\n     * <P>\r\n     * There is an implicit delay: State updates caused by event firings being held with\r\n     * {@link Stream#hold(Object)} don't become visible as the cell's current value until\r\n     * the following transaction. To put this another way, snapshot()\r\n     * always sees the value of a cell as it was before any state changes from the current\r\n     * transaction.\r\n     */\r\n    Stream.prototype.snapshot6 = function (b, c, d, e, f, f_) {\r\n        var _this = this;\r\n        var out = new StreamWithSend(null);\r\n        var ff = Lambda6_toFunction(f_);\r\n        out.vertex = new Vertex(\"snapshot\", 0, [\r\n            new Source(this.vertex, function () {\r\n                return _this.listen_(out.vertex, function (a) {\r\n                    out.send_(ff(a, b.sampleNoTrans__(), c.sampleNoTrans__(), d.sampleNoTrans__(), e.sampleNoTrans__(), f.sampleNoTrans__()));\r\n                }, false);\r\n            }),\r\n            new Source(b.getVertex__(), null),\r\n            new Source(c.getVertex__(), null),\r\n            new Source(d.getVertex__(), null),\r\n            new Source(e.getVertex__(), null),\r\n            new Source(f.getVertex__(), null)\r\n        ].concat(toSources(Lambda6_deps(f_))));\r\n        return out;\r\n    };\r\n    /**\r\n     * Create a {@link Cell} with the specified initial value, that is updated\r\n     * by this stream's event values.\r\n     * <p>\r\n     * There is an implicit delay: State updates caused by event firings don't become\r\n     * visible as the cell's current value as viewed by {@link Stream#snapshot(Cell, Lambda2)}\r\n     * until the following transaction. To put this another way,\r\n     * {@link Stream#snapshot(Cell, Lambda2)} always sees the value of a cell as it was before\r\n     * any state changes from the current transaction.\r\n     */\r\n    Stream.prototype.hold = function (initValue) {\r\n        return new Cell(initValue, this);\r\n    };\r\n    /**\r\n     * A variant of {@link hold(Object)} with an initial value captured by {@link Cell#sampleLazy()}.\r\n     */\r\n    Stream.prototype.holdLazy = function (initValue) {\r\n        return new LazyCell(initValue, this);\r\n    };\r\n    /**\r\n     * Transform an event with a generalized state loop (a Mealy machine). The function\r\n     * is passed the input and the old state and returns the new state and output value.\r\n     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    Stream.prototype.collect = function (initState, f) {\r\n        return this.collectLazy(new Lazy(function () { return initState; }), f);\r\n    };\r\n    /**\r\n     * A variant of {@link collect(Object, Lambda2)} that takes an initial state returned by\r\n     * {@link Cell#sampleLazy()}.\r\n     */\r\n    Stream.prototype.collectLazy = function (initState, f) {\r\n        var ea = this;\r\n        return Transaction.run(function () {\r\n            var es = new StreamLoop(), s = es.holdLazy(initState), ebs = ea.snapshot(s, f), eb = ebs.map(function (bs) { return bs.a; }), es_out = ebs.map(function (bs) { return bs.b; });\r\n            es.loop(es_out);\r\n            return eb;\r\n        });\r\n    };\r\n    /**\r\n     * Accumulate on input event, outputting the new state each time.\r\n     * @param f Function to apply to update the state. It may construct FRP logic or use\r\n     *    {@link Cell#sample()} in which case it is equivalent to {@link Stream#snapshot(Cell)}ing the\r\n     *    cell. Apart from this the function must be <em>referentially transparent</em>.\r\n     */\r\n    Stream.prototype.accum = function (initState, f) {\r\n        return this.accumLazy(new Lazy(function () { return initState; }), f);\r\n    };\r\n    /**\r\n     * A variant of {@link accum(Object, Lambda2)} that takes an initial state returned by\r\n     * {@link Cell#sampleLazy()}.\r\n     */\r\n    Stream.prototype.accumLazy = function (initState, f) {\r\n        var ea = this;\r\n        return Transaction.run(function () {\r\n            var es = new StreamLoop(), s = es.holdLazy(initState), es_out = ea.snapshot(s, f);\r\n            es.loop(es_out);\r\n            return es_out.holdLazy(initState);\r\n        });\r\n    };\r\n    /**\r\n     * Return a stream that outputs only one value: the next event of the\r\n     * input stream, starting from the transaction in which once() was invoked.\r\n     */\r\n    Stream.prototype.once = function () {\r\n        /*\r\n            return Transaction.run(() => {\r\n                const ev = this,\r\n                    out = new StreamWithSend<A>();\r\n                let la : () => void = null;\r\n                la = ev.listen_(out.vertex, (a : A) => {\r\n                    if (la !== null) {\r\n                        out.send_(a);\r\n                        la();\r\n                        la = null;\r\n                    }\r\n                }, false);\r\n                return out;\r\n            });\r\n            */\r\n        // We can't use the implementation above, beacuse deregistering\r\n        // listeners triggers the exception\r\n        // \"send() was invoked before listeners were registered\"\r\n        // We can revisit this another time. For now we will use the less\r\n        // efficient implementation below.\r\n        var me = this;\r\n        return Transaction.run(function () { return me.gate(me.mapTo(false).hold(true)); });\r\n    };\r\n    Stream.prototype.listen = function (h) {\r\n        var _this = this;\r\n        return Transaction.run(function () {\r\n            return _this.listen_(Vertex.NULL, h, false);\r\n        });\r\n    };\r\n    Stream.prototype.listen_ = function (target, h, suppressEarlierFirings) {\r\n        var _this = this;\r\n        if (this.vertex.register(target))\r\n            Transaction.currentTransaction.requestRegen();\r\n        var listener = new Listener(h, target);\r\n        this.listeners.push(listener);\r\n        if (!suppressEarlierFirings && this.firings.length != 0) {\r\n            var firings_1 = this.firings.slice();\r\n            Transaction.currentTransaction.prioritized(target, function () {\r\n                // Anything sent already in this transaction must be sent now so that\r\n                // there's no order dependency between send and listen.\r\n                for (var i = 0; i < firings_1.length; i++)\r\n                    h(firings_1[i]);\r\n            });\r\n        }\r\n        return function () {\r\n            var removed = false;\r\n            for (var i = 0; i < _this.listeners.length; i++) {\r\n                if (_this.listeners[i] == listener) {\r\n                    _this.listeners.splice(i, 1);\r\n                    removed = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (removed)\r\n                _this.vertex.deregister(target);\r\n        };\r\n    };\r\n    /**\r\n     * Fantasy-land Algebraic Data Type Compatability.\r\n     * Stream satisfies the Functor and Monoid Categories (and hence Semigroup)\r\n     * @see {@link https://github.com/fantasyland/fantasy-land} for more info\r\n     */\r\n    //map :: Functor f => f a ~> (a -> b) -> f b\r\n    Stream.prototype['fantasy-land/map'] = function (f) {\r\n        return this.map(f);\r\n    };\r\n    //concat :: Semigroup a => a ~> a -> a\r\n    Stream.prototype['fantasy-land/concat'] = function (a) {\r\n        return this.merge(a, function (left, right) {\r\n            return (Semigroup.test(left)) ? concat(left, right) : left;\r\n        });\r\n    };\r\n    //empty :: Monoid m => () -> m\r\n    Stream.prototype['fantasy-land/empty'] = function () {\r\n        return new Stream();\r\n    };\r\n    return Stream;\r\n}());\r\nvar StreamWithSend = /** @class */ (function (_super) {\r\n    __extends(StreamWithSend, _super);\r\n    function StreamWithSend(vertex) {\r\n        return _super.call(this, vertex) || this;\r\n    }\r\n    StreamWithSend.prototype.setVertex__ = function (vertex) {\r\n        this.vertex = vertex;\r\n    };\r\n    StreamWithSend.prototype.send_ = function (a) {\r\n        var _this = this;\r\n        if (this.firings.length == 0)\r\n            Transaction.currentTransaction.last(function () {\r\n                _this.firings = [];\r\n            });\r\n        this.firings.push(a);\r\n        var listeners = this.listeners.slice();\r\n        var _loop_1 = function (i) {\r\n            var h = listeners[i].h;\r\n            Transaction.currentTransaction.prioritized(listeners[i].target, function () {\r\n                Transaction.currentTransaction.inCallback++;\r\n                try {\r\n                    h(a);\r\n                    Transaction.currentTransaction.inCallback--;\r\n                }\r\n                catch (err) {\r\n                    Transaction.currentTransaction.inCallback--;\r\n                    throw err;\r\n                }\r\n            });\r\n        };\r\n        for (var i = 0; i < listeners.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    return StreamWithSend;\r\n}(Stream));\r\n/**\r\n * A forward reference for a {@link Stream} equivalent to the Stream that is referenced.\r\n */\r\nvar StreamLoop = /** @class */ (function (_super) {\r\n    __extends(StreamLoop, _super);\r\n    function StreamLoop() {\r\n        var _this = _super.call(this) || this;\r\n        _this.assigned__ = false; // to do: Figure out how to hide this\r\n        _this.vertex.name = \"StreamLoop\";\r\n        if (Transaction.currentTransaction === null)\r\n            throw new Error(\"StreamLoop/CellLoop must be used within an explicit transaction\");\r\n        return _this;\r\n    }\r\n    /**\r\n     * Resolve the loop to specify what the StreamLoop was a forward reference to. It\r\n     * must be invoked inside the same transaction as the place where the StreamLoop is used.\r\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n     * or {@link Transaction#runVoid(Runnable)}.\r\n     */\r\n    StreamLoop.prototype.loop = function (sa_out) {\r\n        var _this = this;\r\n        if (this.assigned__)\r\n            throw new Error(\"StreamLoop looped more than once\");\r\n        this.assigned__ = true;\r\n        this.vertex.addSource(new Source(sa_out.getVertex__(), function () {\r\n            return sa_out.listen_(_this.vertex, function (a) {\r\n                _this.send_(a);\r\n            }, false);\r\n        }));\r\n    };\r\n    return StreamLoop;\r\n}(StreamWithSend));\n\nvar CoalesceHandler = /** @class */ (function () {\r\n    function CoalesceHandler(f, out) {\r\n        this.f = Lambda2_toFunction(f);\r\n        this.out = out;\r\n        this.out.getVertex__().sources = this.out.getVertex__().sources.concat(toSources(Lambda2_deps(f)));\r\n        this.accumValid = false;\r\n    }\r\n    CoalesceHandler.prototype.send_ = function (a) {\r\n        var _this = this;\r\n        if (this.accumValid)\r\n            this.accum = this.f(this.accum, a);\r\n        else {\r\n            Transaction.currentTransaction.prioritized(this.out.getVertex__(), function () {\r\n                _this.out.send_(_this.accum);\r\n                _this.accumValid = false;\r\n                _this.accum = null;\r\n            });\r\n            this.accum = a;\r\n            this.accumValid = true;\r\n        }\r\n    };\r\n    return CoalesceHandler;\r\n}());\n\n/**\r\n * A stream that allows values to be pushed into it, acting as an interface between the\r\n * world of I/O and the world of FRP. Code that exports StreamSinks for read-only use\r\n * should downcast to {@link Stream}.\r\n */\r\nvar StreamSink = /** @class */ (function (_super) {\r\n    __extends(StreamSink, _super);\r\n    function StreamSink(f) {\r\n        var _this = _super.call(this) || this;\r\n        _this.disableListenCheck = false;\r\n        if (!f)\r\n            f = (function (l, r) {\r\n                throw new Error(\"send() called more than once per transaction, which isn't allowed. Did you want to combine the events? Then pass a combining function to your StreamSink constructor.\");\r\n            });\r\n        _this.coalescer = new CoalesceHandler(f, _this);\r\n        return _this;\r\n    }\r\n    StreamSink.prototype.send = function (a) {\r\n        var _this = this;\r\n        Transaction.run(function () {\r\n            // We throw this error if we send into FRP logic that has been constructed\r\n            // but nothing is listening to it yet. We need to do it this way because\r\n            // it's the only way to manage memory in a language with no finalizers.\r\n            if (!_this.disableListenCheck) {\r\n                if (_this.vertex.refCount() == 0) {\r\n                    throw new Error(\"send() was invoked before listeners were registered\");\r\n                }\r\n            }\r\n            //\r\n            if (Transaction.currentTransaction.inCallback > 0)\r\n                throw new Error(\"You are not allowed to use send() inside a Sodium callback\");\r\n            _this.coalescer.send_(a);\r\n        });\r\n    };\r\n    StreamSink.prototype.listen_ = function (target, h, suppressEarlierFirings) {\r\n        var result = _super.prototype.listen_.call(this, target, h, suppressEarlierFirings);\r\n        this.disableListenCheck = true;\r\n        return result;\r\n    };\r\n    return StreamSink;\r\n}(StreamWithSend));\n\n/**\r\n * A forward reference for a {@link Cell} equivalent to the Cell that is referenced.\r\n */\r\nvar CellLoop = /** @class */ (function (_super) {\r\n    __extends(CellLoop, _super);\r\n    function CellLoop() {\r\n        return _super.call(this, null, new StreamLoop()) || this;\r\n    }\r\n    /**\r\n     * Resolve the loop to specify what the CellLoop was a forward reference to. It\r\n     * must be invoked inside the same transaction as the place where the CellLoop is used.\r\n     * This requires you to create an explicit transaction with {@link Transaction#run(Lambda0)}\r\n     * or {@link Transaction#runVoid(Runnable)}.\r\n     */\r\n    CellLoop.prototype.loop = function (a_out) {\r\n        var me = this;\r\n        Transaction.run(function () {\r\n            me.getStream__().loop(a_out.getStream__());\r\n            me.lazyInitValue = a_out.sampleLazy();\r\n        });\r\n    };\r\n    CellLoop.prototype.sampleNoTrans__ = function () {\r\n        if (!this.getStream__().assigned__)\r\n            throw new Error(\"CellLoop sampled before it was looped\");\r\n        return _super.prototype.sampleNoTrans__.call(this);\r\n    };\r\n    return CellLoop;\r\n}(LazyCell));\n\n/**\r\n * A cell that allows values to be pushed into it, acting as an interface between the\r\n * world of I/O and the world of FRP. Code that exports CellSinks for read-only use\r\n * should downcast to {@link Cell}.\r\n */\r\nvar CellSink = /** @class */ (function (_super) {\r\n    __extends(CellSink, _super);\r\n    /**\r\n     * Construct a writable cell with the specified initial value. If multiple values are\r\n     * sent in the same transaction, the specified function is used to combine them.\r\n     *\r\n     * If the function is not supplied, then an exception will be thrown in this case.\r\n     */\r\n    function CellSink(initValue, f) {\r\n        return _super.call(this, initValue, new StreamSink(f)) || this;\r\n    }\r\n    /**\r\n     * Send a value, modifying the value of the cell. send(A) may not be used inside\r\n     * handlers registered with {@link Stream#listen(Handler)} or {@link Cell#listen(Handler)}.\r\n     * An exception will be thrown, because CellSink is for interfacing I/O to FRP only.\r\n     * You are not meant to use this to define your own primitives.\r\n     * @param a Value to push into the cell.\r\n     */\r\n    CellSink.prototype.send = function (a) {\r\n        this.getStream__().send(a);\r\n    };\r\n    return CellSink;\r\n}(Cell));\n\nvar Router = /** @class */ (function () {\r\n    function Router(inStream, selector, keyToStr) {\r\n        var _this = this;\r\n        this._inStream = inStream;\r\n        this._table = new Dictionary(keyToStr);\r\n        this._vertex =\r\n            new Vertex(\"Router\", this._inStream.getVertex__().rank + 1, // <-- estimated rank only, may be adjusted by ensureBiggerThan\r\n            []);\r\n        this._vertex.addSource(new Source(this._inStream.getVertex__(), function () {\r\n            return _this._inStream.listen_(_this._vertex, function (a) {\r\n                var ks = selector(a);\r\n                var visited = new Set(keyToStr);\r\n                var outs = [];\r\n                for (var i = 0; i < ks.length; ++i) {\r\n                    var k = ks[i];\r\n                    if (visited.contains(k)) {\r\n                        continue;\r\n                    }\r\n                    visited.add(k);\r\n                    var outs2 = _this._table.getValue(k);\r\n                    if (outs2 != undefined) {\r\n                        for (var j = 0; j < outs2.length; ++j) {\r\n                            outs.push(outs2[j]);\r\n                        }\r\n                    }\r\n                }\r\n                for (var i = 0; i < outs.length; ++i) {\r\n                    outs[i].send_(a);\r\n                }\r\n            }, true);\r\n        }));\r\n    }\r\n    Router.prototype.filterMatches = function (k) {\r\n        var _this = this;\r\n        var out = new StreamWithSend();\r\n        var vertex = new Vertex(\"Router::filterMatches\", this._vertex.rank + 1, // <-- estimated rank only, may be adjusted by ensureBiggerThan\r\n        [\r\n            new Source(this._vertex, function () {\r\n                _this._vertex.increment(out.getVertex__());\r\n                var outs = _this._table.getValue(k);\r\n                if (outs == undefined) {\r\n                    outs = [];\r\n                    _this._table.setValue(k, outs);\r\n                }\r\n                outs.push(out);\r\n                return function () {\r\n                    _this._vertex.decrement(out.getVertex__());\r\n                    var outs2 = _this._table.getValue(k);\r\n                    for (var i = outs2.length - 1; i >= 0; --i) {\r\n                        if (outs2[i] == out) {\r\n                            outs2.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (outs2.length == 0) {\r\n                        _this._table.remove(k);\r\n                    }\r\n                };\r\n            })\r\n        ]);\r\n        out.setVertex__(vertex);\r\n        return out;\r\n    };\r\n    return Router;\r\n}());\n\n/**\r\n * An interface for implementations of FRP timer systems.\r\n */\r\nvar TimerSystemImpl = /** @class */ (function () {\r\n    function TimerSystemImpl() {\r\n    }\r\n    return TimerSystemImpl;\r\n}());\r\nvar nextSeq = 0;\r\nvar Event = /** @class */ (function () {\r\n    function Event(t, sAlarm) {\r\n        this.t = t;\r\n        this.sAlarm = sAlarm;\r\n        this.seq = ++nextSeq;\r\n    }\r\n    return Event;\r\n}());\r\nvar TimerSystem = /** @class */ (function () {\r\n    function TimerSystem(impl) {\r\n        var _this = this;\r\n        this.eventQueue = new BSTree(function (a, b) {\r\n            if (a.t < b.t)\r\n                return -1;\r\n            if (a.t > b.t)\r\n                return 1;\r\n            if (a.seq < b.seq)\r\n                return -1;\r\n            if (a.seq > b.seq)\r\n                return 1;\r\n            return 0;\r\n        });\r\n        Transaction.run(function () {\r\n            _this.impl = impl;\r\n            _this.tMinimum = 0;\r\n            var timeSnk = new CellSink(impl.now());\r\n            _this.time = timeSnk;\r\n            // A dummy listener to time to keep it alive even when there are no other listeners.\r\n            _this.time.listen(function (t) { });\r\n            Transaction.onStart(function () {\r\n                // Ensure the time is always increasing from the FRP's point of view.\r\n                var t = _this.tMinimum = Math.max(_this.tMinimum, impl.now());\r\n                var _loop_1 = function () {\r\n                    var ev = null;\r\n                    if (!_this.eventQueue.isEmpty()) {\r\n                        var mev = _this.eventQueue.minimum();\r\n                        if (mev.t <= t) {\r\n                            ev = mev;\r\n                            // TO DO: Detect infinite loops!\r\n                        }\r\n                    }\r\n                    if (ev != null) {\r\n                        timeSnk.send(ev.t);\r\n                        Transaction.run(function () { return ev.sAlarm.send_(ev.t); });\r\n                    }\r\n                    else\r\n                        return \"break\";\r\n                };\r\n                // Pop and execute all events earlier than or equal to t (the current time).\r\n                while (true) {\r\n                    var state_1 = _loop_1();\r\n                    if (state_1 === \"break\")\r\n                        break;\r\n                }\r\n                timeSnk.send(t);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * A timer that fires at the specified time, which can be null, meaning\r\n     * that the alarm is not set.\r\n     */\r\n    TimerSystem.prototype.at = function (tAlarm) {\r\n        var _this = this;\r\n        var current = null, cancelCurrent = null, active = false, tAl = null, sampled = false;\r\n        var sAlarm = new StreamWithSend(null), updateTimer = function () {\r\n            if (cancelCurrent !== null) {\r\n                cancelCurrent();\r\n                _this.eventQueue.remove(current);\r\n            }\r\n            cancelCurrent = null;\r\n            current = null;\r\n            if (active) {\r\n                if (!sampled) {\r\n                    sampled = true;\r\n                    tAl = tAlarm.sampleNoTrans__();\r\n                }\r\n                if (tAl !== null) {\r\n                    current = new Event(tAl, sAlarm);\r\n                    _this.eventQueue.add(current);\r\n                    cancelCurrent = _this.impl.setTimer(tAl, function () {\r\n                        // Correction to ensure the clock time appears to be >= the\r\n                        // alarm time. It can be a few milliseconds early, and\r\n                        // this breaks things otherwise, because it doesn't think\r\n                        // it's time to fire the alarm yet.\r\n                        _this.tMinimum = Math.max(_this.tMinimum, tAl);\r\n                        // Open and close a transaction to trigger queued\r\n                        // events to run.\r\n                        Transaction.run(function () { });\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        sAlarm.setVertex__(new Vertex(\"at\", 0, [\r\n            new Source(tAlarm.getVertex__(), function () {\r\n                active = true;\r\n                sampled = false;\r\n                Transaction.currentTransaction.prioritized(sAlarm.getVertex__(), updateTimer);\r\n                var kill = tAlarm.getStream__().listen_(sAlarm.getVertex__(), function (oAlarm) {\r\n                    tAl = oAlarm;\r\n                    sampled = true;\r\n                    updateTimer();\r\n                }, false);\r\n                return function () {\r\n                    active = false;\r\n                    updateTimer();\r\n                    kill();\r\n                };\r\n            })\r\n        ]));\r\n        return sAlarm;\r\n    };\r\n    return TimerSystem;\r\n}());\n\n/**\r\n * A timer system implementation using seconds as the time unit.\r\n */\r\nvar SecondsTimerSystem = /** @class */ (function (_super) {\r\n    __extends(SecondsTimerSystem, _super);\r\n    function SecondsTimerSystem() {\r\n        return _super.call(this, new SecondsTimerSystemImpl()) || this;\r\n    }\r\n    return SecondsTimerSystem;\r\n}(TimerSystem));\r\nvar SecondsTimerSystemImpl = /** @class */ (function (_super) {\r\n    __extends(SecondsTimerSystemImpl, _super);\r\n    function SecondsTimerSystemImpl() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Set a timer that will execute the specified callback at the specified time.\r\n     * @return A function that can be used to cancel the timer.\r\n     */\r\n    SecondsTimerSystemImpl.prototype.setTimer = function (t, callback) {\r\n        var timeout = setTimeout(callback, Math.max((t - this.now()) * 1000, 0));\r\n        return function () { clearTimeout(timeout); };\r\n    };\r\n    /**\r\n     * Return the current clock time.\r\n     */\r\n    SecondsTimerSystemImpl.prototype.now = function () {\r\n        return Date.now() * 0.001;\r\n    };\r\n    return SecondsTimerSystemImpl;\r\n}(TimerSystemImpl));\n\n/**\r\n * A timer system implementation using milliseconds as the time unit.\r\n */\r\nvar MillisecondsTimerSystem = /** @class */ (function (_super) {\r\n    __extends(MillisecondsTimerSystem, _super);\r\n    function MillisecondsTimerSystem() {\r\n        return _super.call(this, new MillisecondsTimerSystemImpl()) || this;\r\n    }\r\n    return MillisecondsTimerSystem;\r\n}(TimerSystem));\r\nvar MillisecondsTimerSystemImpl = /** @class */ (function (_super) {\r\n    __extends(MillisecondsTimerSystemImpl, _super);\r\n    function MillisecondsTimerSystemImpl() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * Set a timer that will execute the specified callback at the specified time.\r\n     * @return A function that can be used to cancel the timer.\r\n     */\r\n    MillisecondsTimerSystemImpl.prototype.setTimer = function (t, callback) {\r\n        var timeout = setTimeout(callback, Math.max(t - this.now(), 0));\r\n        return function () { clearTimeout(timeout); };\r\n    };\r\n    /**\r\n     * Return the current clock time.\r\n     */\r\n    MillisecondsTimerSystemImpl.prototype.now = function () {\r\n        return Date.now();\r\n    };\r\n    return MillisecondsTimerSystemImpl;\r\n}(TimerSystemImpl));\n\nvar IOAction = /** @class */ (function () {\r\n    function IOAction() {\r\n    }\r\n    /*!\r\n     * Convert a function that performs asynchronous I/O taking input A\r\n     * and returning a value of type B into an I/O action of type\r\n     * (sa : Stream<A>) => Stream<B>\r\n     */\r\n    IOAction.fromAsync = function (performIO) {\r\n        return function (sa) {\r\n            var out = new StreamWithSend(null);\r\n            out.setVertex__(new Vertex(\"map\", 0, [\r\n                new Source(sa.getVertex__(), function () {\r\n                    return sa.listen_(out.getVertex__(), function (a) {\r\n                        performIO(a, function (b) {\r\n                            Transaction.run(function () {\r\n                                out.send_(b);\r\n                            });\r\n                        });\r\n                    }, false);\r\n                })\r\n            ]));\r\n            return out;\r\n        };\r\n    };\r\n    return IOAction;\r\n}());\n\nexport { lambda1, lambda2, lambda3, lambda4, lambda5, lambda6, Stream, StreamLoop, StreamSink, Cell, CellLoop, CellSink, Router, Transaction, Tuple2, Unit, Operational, getTotalRegistrations, Vertex, TimerSystemImpl, TimerSystem, SecondsTimerSystem, MillisecondsTimerSystem, IOAction };\n//# sourceMappingURL=sodium.esm.js.map\n","import { jsxmlComponentVisitor } from \"./jsxmlComponentVisitor\";\r\nimport { DOMSource } from \"./types\";\r\n\r\n\r\nexport abstract class jsxmlComponent {\r\n\r\n    abstract accept(visitor: jsxmlComponentVisitor): void;\r\n    abstract migrate(newValue: DOMSource) : jsxmlComponent;\r\n\r\n    source: DOMSource\r\n    parent?: jsxmlComponent\r\n\r\n    constructor(source: DOMSource, parent?: jsxmlComponent) {\r\n        this.parent = parent;\r\n        this.source = source;\r\n    }\r\n\r\n    nest(newValue: DOMSource) : jsxmlComponent {\r\n        return Object.assign(this.migrate(newValue), { parent: this })\r\n    }\r\n\r\n    isAncestorOf<C extends jsxmlComponent>(that: C) {\r\n        for(let ctx = that.parent; ctx; ctx = ctx.parent) if(ctx === this) return true;\r\n        return false;\r\n    }\r\n\r\n}\r\n","import { StreamSink } from \"sodiumjs\";\r\nimport { jsxmlComponent } from \"./jsxmlComponent\";\r\nimport { jsxmlComponentVisitor } from \"./jsxmlComponentVisitor\";\r\nimport { AttrValue, DOMSource } from \"./types\";\r\n\r\nexport class jsxmlAttr extends jsxmlComponent {\r\n\r\n    public element: Element;\r\n    public name: string;\r\n    public prevValue?: AttrValue;\r\n\r\n    constructor(element: Element, name: string, source: AttrValue, old_source?: AttrValue, parent?: jsxmlComponent) {\r\n        super(source instanceof StreamSink ? source.send.bind(source) : source, parent)\r\n        this.element = element;\r\n        this.name = name;\r\n        this.prevValue = old_source;\r\n    }\r\n\r\n    migrate(v: DOMSource) {\r\n        return new jsxmlAttr(this.element, this.name, v, this.source, this.parent);\r\n    }\r\n\r\n    accept(visitor: jsxmlComponentVisitor): void {\r\n        visitor.visitAttr(this);\r\n    }\r\n\r\n}\r\n","import { jsxmlComponent } from \"./jsxmlComponent\";\r\nimport { jsxmlVisitor } from \"./jsxmlVisitor\";\r\nimport { DOMSource } from \"./types\";\r\n\r\nexport class jsxmlAttributes extends jsxmlComponent {\r\n\r\n    public element: Element;\r\n    prevValues?: DOMSource;\r\n\r\n    constructor(elm: Element, source: DOMSource, prev?: DOMSource, parent?: jsxmlComponent) {\r\n        super(source, parent);\r\n        this.element = elm;\r\n        this.prevValues = prev;\r\n    }\r\n\r\n    migrate(newValue: DOMSource) {\r\n        return new jsxmlAttributes(this.element, newValue, this.source, this.parent);\r\n    }\r\n\r\n    accept(visitor: jsxmlVisitor): void {\r\n        visitor.visitAttributes(this);\r\n    }\r\n\r\n}\r\n","import { jsxmlComponent } from \"./jsxmlComponent\";\r\nimport { jsxmlComponentVisitor } from \"./jsxmlComponentVisitor\";\r\nimport { NodeSource } from \"./types\";\r\n\r\nexport class jsxmlNode extends jsxmlComponent {\r\n\r\n    reference: [Node] | [Node,Node];\r\n\r\n    constructor(ref: Node | [Node] | [Node,Node], source: NodeSource, parent?: jsxmlComponent) {\r\n        super(source, parent);\r\n        this.reference = Array.isArray(ref)\r\n            ? ref\r\n            : ref.nodeType === ref.DOCUMENT_FRAGMENT_NODE\r\n            ? [ref.firstChild, ref.lastChild] as [Node,Node]\r\n            : [ref];\r\n    }\r\n\r\n    migrate(source: NodeSource) {\r\n        return new jsxmlNode(this.reference, source, this.parent);\r\n    }\r\n\r\n    accept(visitor: jsxmlComponentVisitor): void {\r\n        visitor.visitNode(this);\r\n    }\r\n\r\n}\r\n","import { jsxmlComponent } from \"./jsxmlComponent\";\r\nimport { jsxmlAttr } from \"./jsxmlAttr\";\r\nimport { Cell, Operational } from \"sodiumjs\";\r\nimport { jsxmlAttributes } from \"./jsxmlAttributes\";\r\nimport { jsxmlNode } from \"./jsxmlNode\";\r\nimport { DOMSource, ElementSource, AttributesSource, AttrValue } from \"./types\";\r\nimport { jsxmlComponentVisitor } from \"./jsxmlComponentVisitor\";\r\n\r\ntype UPDATE_INFO = [jsxmlComponent, DOMSource, DOMSource];\r\n\r\nexport class jsxmlVisitor implements jsxmlComponentVisitor {\r\n\r\n    /**\r\n     * ガベージコレクションの管理用。\r\n     */\r\n    private _binding : Map<jsxmlComponent, Function>;\r\n\r\n    /**\r\n     * componentの入れ子状況\r\n     */\r\n    private _lineage: jsxmlComponent[] = [];\r\n    \r\n    /**\r\n     * listenで取得する更新情報の格納場所。requestAnimationFrameで一括処理する。\r\n     */\r\n    private _updates: UPDATE_INFO[] = [];\r\n\r\n    constructor() {\r\n        this._binding = new Map();\r\n    }\r\n\r\n    get context() {\r\n        return this._lineage[this._lineage.length - 1];\r\n    }\r\n\r\n    visitCell(c: jsxmlComponent) {\r\n        const cell = c.source as Cell<DOMSource>;\r\n        this._binding.set(c, Operational.updates(cell).listen((v) => this.enqueue([c, v, deepSample(cell)])));\r\n        this._lineage.push(c);\r\n        c.nest(cell.sample()).accept(this);\r\n        this._lineage.pop();\r\n    }\r\n\r\n    enqueue(i: UPDATE_INFO) {\r\n        if (this._updates.push(i) === 1) requestAnimationFrame(() => this.dequeue());\r\n    }\r\n\r\n    dequeue() {\r\n        this._updates.splice(0)\r\n            .filter(([a], i, q) => q.every(([b]) => a === b || !b.isAncestorOf(a)))\r\n            .forEach(([ctx, v]) => {\r\n                this.garbageCollect(ctx);\r\n                ctx.nest(v).accept(this);\r\n            });\r\n    }\r\n\r\n    garbageCollect(ctx: jsxmlComponent) {\r\n        Array.from(this._binding.keys())\r\n            .filter((that) => ctx.isAncestorOf(that))\r\n            .forEach((that) => {\r\n                this._binding.get(that)!(void 0);\r\n                this._binding.delete(that)\r\n            })\r\n    }\r\n\r\n    buildNode(s: DOMSource, p: ParentNode) {\r\n        if (s instanceof Cell)\r\n            this.visitCell(new jsxmlNode(p.appendChild(new Comment('jsxml-placeholder')), s, this.context));\r\n        else if (s instanceof Node)\r\n            p.append(s);\r\n        else if (Object(s) !== s)\r\n            p.append(new Text(s === undefined || s === null ? '' : s + ''));\r\n        else if (Array.isArray(s))\r\n            s.forEach((s) => this.buildNode(s, p));\r\n        else\r\n            this.buildElement(s as ElementSource, p);\r\n    }\r\n\r\n    buildElement(source: ElementSource, p: ParentNode) {\r\n        const tag = Object.keys(source).find((k) => k !== '$') as keyof HTMLElementTagNameMap;\r\n        const attrs = source.$ as AttributesSource;\r\n        const children = source[tag];\r\n        const elm = (p.ownerDocument as Document).createElement(tag);\r\n        p.append(elm);\r\n        if (children != null)\r\n            this.buildNode(children, elm);\r\n        if (Object(attrs) === attrs)\r\n            this.visitAttributes(new jsxmlAttributes(elm, attrs, undefined, this.context));\r\n    }\r\n\r\n    visitNode(o: jsxmlNode): void {\r\n        const [a,b] = o.reference.slice(0);\r\n        const doc = a.ownerDocument as Document;\r\n        const df = doc.createDocumentFragment();\r\n\r\n        this.buildNode(o.source, df);\r\n        // リファレンス更新\r\n        o.reference.splice(0,2, ...(df.childNodes.length === 2 ? [df.firstChild,df.lastChild] : [df.firstChild]) as Node[]);\r\n\r\n        if(!b) a.parentNode!.replaceChild(df, a);\r\n\r\n        // DOM更新(Document接続済み)\r\n        else if (a.isConnected) {\r\n            const r = new Range();\r\n            r.setStartBefore(a);\r\n            r.setEndAfter(b);\r\n            const o = r.endOffset;\r\n            r.insertNode(df);\r\n            r.setStart(r.startContainer, r.startOffset + r.endOffset - o);\r\n            r.deleteContents();\r\n        }\r\n\r\n        // DOM更新(Document接続なし)\r\n        else {\r\n            const parent = a.parentNode; if (!parent) return;\r\n            parent.insertBefore(df, a);\r\n            while (a.nextSibling && a.nextSibling !== b) parent.removeChild(a.nextSibling);\r\n            parent.removeChild(a);\r\n            parent.removeChild(b);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    visitAttributes(attrs: jsxmlAttributes) {\r\n        const source = attrs.source;\r\n        if (source instanceof Cell) {\r\n            this.visitCell(attrs);\r\n        } else {\r\n            type V = { [key: string]: AttrValue; };\r\n            const elm = attrs.element;\r\n            const prev = attrs.prevValues || {};\r\n            Object.keys(Object.assign({}, attrs.source, attrs.prevValues))\r\n                .map((k) => new jsxmlAttr(elm, k, (source as V)[k], (prev as V)[k]))\r\n                .forEach((attr) => this.visitAttr(attr));\r\n        }\r\n    }\r\n\r\n    visitAttr(attr: jsxmlAttr) {\r\n        const { element, name, source, prevValue } = attr;\r\n\r\n        if (source instanceof Cell) {\r\n            this.visitCell(attr);\r\n        }\r\n\r\n        else if (/^on./.test(name)) {\r\n            if (validateEventListenable(prevValue))\r\n                element.removeEventListener(name.slice(2), <EventListenerOrEventListenerObject>prevValue, false);\r\n            if (validateEventListenable(source))\r\n                element.addEventListener(name.slice(2), <EventListenerOrEventListenerObject>source, false);\r\n        }\r\n\r\n        else if (source == null || source == '')\r\n            element.removeAttribute(name);\r\n\r\n        else if (Object(source) !== source)\r\n            element.setAttribute(name, \"\" + source);\r\n\r\n        else if (/^class(List)?$/.test(name))\r\n            element.className = Array.isArray(source)\r\n                ? source.filter(Boolean).join(\" \")\r\n                : '' + source;\r\n\r\n    }\r\n\r\n    detach() {\r\n        Array.from(this._binding.values()).forEach((v) => v());\r\n        this._binding.clear();\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * 引数がイベントリスナか判定する\r\n * @param value\r\n */\r\nfunction validateEventListenable(value: unknown): boolean {\r\n    return !!(value) && (typeof value === \"function\" || typeof (<EventListenerObject>value).handleEvent === 'function');\r\n}\r\n\r\nfunction deepSample<V>(v: V | Cell<V>): V {\r\n    return v instanceof Cell ? deepSample(v.sample()) : v;\r\n}\r\n","import { jsxmlComponent } from \"./jsxmlComponent\";\r\nimport { jshtmlVisitor } from \"./jshtmlVisitor\";\r\nimport { DOMSource, DOMStringSource } from \"./types\";\r\n\r\nexport class jshtmlInlineStyleRule extends jsxmlComponent {\r\n    element: HTMLElement\r\n    cssprop: string;\r\n\r\n    constructor(element: HTMLElement, cssprop: string, source: DOMStringSource, parent?: jsxmlComponent) {\r\n        super(source, parent);\r\n        this.element = element;\r\n        this.cssprop = cssprop;\r\n    }\r\n\r\n    accept(visitor: jshtmlVisitor): void {\r\n        visitor.visitStyle(this)\r\n    }\r\n\r\n    migrate(v:DOMSource) {\r\n        return new jshtmlInlineStyleRule(this.element, this.cssprop, v, this.parent);\r\n    }\r\n\r\n\r\n}\r\n","import { jsxmlComponent } from \"./jsxmlComponent\";\r\nimport { jshtmlVisitor } from \"./jshtmlVisitor\";\r\nimport { DOMSource, DOMStringSource } from \"./types\";\r\n\r\nexport class jshtmlDatasetValue extends jsxmlComponent {\r\n\r\n    element: HTMLElement;\r\n    dataname: string;\r\n\r\n    constructor(element: HTMLElement, dataname: string, source: DOMStringSource, parent?: jsxmlComponent) {\r\n        super(source, parent);\r\n        this.element = element;\r\n        this.dataname = dataname;\r\n    }\r\n\r\n    accept(visitor: jshtmlVisitor): void {\r\n        visitor.visitDataset(this);\r\n    }\r\n\r\n    migrate(v: DOMSource) {\r\n        return new jshtmlDatasetValue(this.element, this.dataname, v, this.parent);\r\n    }\r\n\r\n}\r\n","import { Cell } from \"sodiumjs\";\r\nimport { jsxmlAttr } from \"./jsxmlAttr\";\r\nimport { jshtmlInlineStyleRule } from \"./jshtmlInlineStyleRule\";\r\nimport { jshtmlDatasetValue } from \"./jshtmlDataset\";\r\nimport { jsxmlVisitor } from \"./jsxmlVisitor\";\r\nimport { NodeSource } from \"./types\";\r\n\r\nexport class jshtmlVisitor extends jsxmlVisitor {\r\n\r\n    buildNode(source: NodeSource, parent: ParentNode) {\r\n        // HTMLTemplateElementだけはcontentをcloneしてビルド\r\n        return super.buildNode(source instanceof HTMLTemplateElement ? source.content.cloneNode(true) : source, parent);\r\n    }\r\n\r\n    /**\r\n     * インラインstyleとdatasetに対応する\r\n     */\r\n    visitAttr(attr: jsxmlAttr) {\r\n        const { element, name } = attr;\r\n        const v = attr.source as { [key: string]: string; };\r\n        const isHtmlSpecialized = element instanceof HTMLElement &&\r\n            (name === 'style' || name === 'dataset') &&\r\n            Object(v) === v;\r\n        if (!isHtmlSpecialized) return super.visitAttr(attr);\r\n\r\n        const keys = Object.keys(Object.assign({}, v, attr.prevValue));\r\n        if(name === 'style')\r\n            keys.forEach((k) => this.visitStyle(new jshtmlInlineStyleRule(element, k, v[k], attr)));\r\n        else\r\n            keys.forEach((k) => this.visitDataset(new jshtmlDatasetValue(element, k, v[k], attr)));\r\n    }\r\n\r\n    visitStyle(style: jshtmlInlineStyleRule) {\r\n        const {source,element,cssprop} = style;\r\n        if(source instanceof Cell)\r\n            this.visitCell(style)\r\n        else\r\n            // 簡略構文がtypescriptではサポートされていないので、強引な型処理でチェックを通す\r\n            element.style[cssprop as \"color\"] = source === null || source === undefined ? '' : '' + source;\r\n    }\r\n\r\n    visitDataset(data: jshtmlDatasetValue) {\r\n        const {source,dataname,element} = data;\r\n        if (source instanceof Cell)\r\n            this.visitCell(data);\r\n        else if(source === null || source === undefined)\r\n            delete element.dataset[hyphenSeparatedToCamelize(dataname)];\r\n        else\r\n            element.dataset[hyphenSeparatedToCamelize(dataname)] = <string>source;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * キャメルケース -> ハイフン区切り変換\r\n * CSSStyleDeclaraion::setProperty and removeProperty を使う場合は必要\r\nfunction camelToHyphenSeparated(str: string) {\r\n    return str.replace(/[A-Z]/g, (s: string) => '-' + s.toLowerCase());\r\n}\r\n */\r\n\r\n/**\r\n * ハイフン区切り -> キャメルケース変換\r\n * datasetの名称処理に使用\r\n */\r\nfunction hyphenSeparatedToCamelize(str: string) {\r\n    return str.replace(/-[a-z]/g, (s: string) => s.charAt(1).toUpperCase());\r\n}\r\n","import { jsxmlVisitor } from \"./jsxmlVisitor\";\r\nimport { jsxmlNode } from \"./jsxmlNode\";\r\nimport { NodeSource, AttributesSource } from \"./types\";\r\nimport { jsxmlComponentVisitor } from \"./jsxmlComponentVisitor\";\r\n\r\ninterface jsxmlVisitorConstructor {\r\n    new(): jsxmlComponentVisitor\r\n}\r\n\r\ninterface jsxmlConstructor<T extends jsxml> {\r\n    visitorConstructor: jsxmlVisitorConstructor\r\n    new(s:NodeSource) : T\r\n}\r\n\r\nexport class jsxml {\r\n\r\n    protected static visitorConstructor : jsxmlVisitorConstructor = jsxmlVisitor;\r\n\r\n    source: NodeSource\r\n\r\n    constructor(s: NodeSource) {\r\n        this.source = s;\r\n    }\r\n\r\n    map(f: (s:NodeSource) => NodeSource) {\r\n        return new (this.constructor as jsxmlConstructor<typeof this>)(f(this.source));\r\n    }\r\n\r\n    wrap(tag:string, attrs?: AttributesSource) {\r\n        return new (this.constructor as jsxmlConstructor<typeof this>)({ [tag]: this.source, $: attrs })\r\n    }\r\n\r\n    protected _mount(n: jsxmlNode) {\r\n        const v = new (this.constructor as jsxmlConstructor<typeof this>).visitorConstructor()\r\n        n.accept(v);\r\n        return v.detach.bind(v)\r\n    }\r\n\r\n    mount(n: Node) {\r\n        return this._mount(new jsxmlNode(n, this.source))\r\n    }\r\n\r\n    mountAsContents(n: Node) {\r\n        return this._mount(n.hasChildNodes()\r\n            ? new jsxmlNode([n.firstChild,n.lastChild] as [Node,Node], this.source)\r\n            : new jsxmlNode(n.appendChild(new Comment('jsxml-placeholder')), this.source))\r\n    }\r\n\r\n    appendTo(n: Node) {\r\n        return this.mount(n.appendChild(new Comment('jsxml-placeholder')));\r\n    }\r\n\r\n    prependTo(n: Node) {\r\n        return this.mount(n.insertBefore(new Comment('jsxml-placeholder'), n.firstChild));\r\n    }\r\n\r\n\r\n}\r\n\r\n","import { jshtmlVisitor } from \"./jshtmlVisitor\";\r\nimport { jsxml } from \"./jsxml\";\r\n\r\nexport class jshtml extends jsxml {\r\n    \r\n    protected static visitorConstructor = jshtmlVisitor;\r\n\r\n    mountAsShadow(e: HTMLElement, init?: ShadowRootInit) {\r\n        this.mountAsContents(e.shadowRoot || e.attachShadow(init || { mode: \"closed\" }));\r\n    }\r\n\r\n}\r\n\r\n","import {jsxml as _jsxml} from \"./jsxml\";\r\nimport {jshtml as _jshtml} from \"./jshtml\";\r\nimport {AttributesSource,EventStreamMap,NodeSource} from \"./types\";\r\nimport {StreamSink,Operational,Cell} from \"sodiumjs\";\r\n\r\n/**\r\n * ターゲットのイベントをStream化する。\r\n */\r\nexport const events = (t: EventTarget) : EventStreamMap => {\r\n    const map = {} as EventStreamMap;\r\n    const send = (e: Event) => map[e.type as keyof EventStreamMap].send(e)\r\n    return new Proxy(map, {\r\n        get: (o,p) => {\r\n            if(typeof p === 'symbol' || o.hasOwnProperty(p)) return Reflect.get(o,p);\r\n            t.addEventListener(p,send);\r\n            return (o[p] = new StreamSink<Event>());\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * ターゲットの変異をStream化する。\r\n */\r\nexport const mutations = (n: Node, init?: MutationObserverInit) => {\r\n    const sink = new StreamSink<MutationRecord[]>();\r\n    const observer = new MutationObserver(sink.send.bind(sink));\r\n    observer.observe(n, init);\r\n    return Operational.split(sink);\r\n}\r\n\r\n/**\r\n * ターゲットの属性をCell化する。\r\n */\r\nexport const attributes = (e: Element, filter?: string[]) : { [key:string]: Cell<string> } => {\r\n    const sAttrChanges = mutations(e, { attributes: true, attributeFilter: filter })\r\n    return new Proxy({}, {\r\n        get: (o,p) => {\r\n            if(typeof p === 'string' && !o.hasOwnProperty(p))\r\n                Reflect.set(o,p,\r\n                    sAttrChanges\r\n                        .filter((r) => r.attributeName === p)\r\n                        .map((r) => (r.target as Element).getAttribute(p) || '')\r\n                        .hold(e.hasAttribute(p) ? e.getAttribute(p) || '' : ''))\r\n            return Reflect.get(o,p);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * jshtml記法のノードをElementにラップする\r\n */\r\nexport const wrap = (tag:string, attrs?: AttributesSource) => attrs\r\n    ? (content:NodeSource) => ({ [tag]: content, $: attrs })\r\n    : (content:NodeSource) => ({ [tag]: content });\r\n   \r\n\r\n// jsxml, jshtmlは純粋関数としても活用できるようにProxyをかます\r\nconst proxy_handler = {\r\n    apply<T extends _jsxml>(target: { new(s:NodeSource): T }, b:unknown, c:NodeSource[]) : T { return new target(c[0]) }\r\n};\r\n\r\nexport const jsxml  = new Proxy(_jsxml, proxy_handler) as typeof _jsxml & ((s:NodeSource) => _jsxml);\r\nexport const jshtml = new Proxy(_jshtml, proxy_handler) as typeof _jshtml & ((s:NodeSource) => _jshtml);\r\n"],"names":["Object","defineProperty","value","_hasOwnProperty","prototype","hasOwnProperty","isFunction","func","isUndefined","obj","isString","toString","call","exports","prop","a","b","item","join","toret","first","has","compareFunction","d","v","arrays","util","require$$0","indexOf","array","equalsFunction","equals","defaultEquals","length","i","index","splice","freq","array1","array2","concat","j","temp","callback","_i","array_1","Dictionary_1","Dictionary","toStrFunction","this","table","nElements","toStr","defaultToString","getValue","key","pair","setValue","ret","k","previousElement","undefined","remove","keys","name_1","push","values","name_2","forEach","name_3","containsKey","clear","size","isEmpty","_Set","require$$1","require$$2","Set","toStringFunction","dictionary","default","contains","element","add","intersection","otherSet","set","union","difference","isSubsetOf","isSub","toArray","Bag_1","Set_1","Bag","toStrF","nCopies","copies","node","count","values_1","toSet","elements_1","LinkedList_1","LinkedList","firstNode","lastNode","newNode","createNode","next","prev","nodeAtIndex","last","elementAtIndex","equalsF","currentNode","previous","other","eqF","equalsAux","n1","n2","removeElementAtIndex","reverse","current","Queue_1","Queue","list","enqueue","elem","dequeue","el","peek","BSTreeKV_1","BSTreeKV","root","compare","defaultCompare","insertNode","searchNode","search","removeNode","inorderTraversal","inorderTraversalAux","stop","preorderTraversal","preorderTraversalAux","postorderTraversal","postorderTraversalAux","levelTraversal","levelTraversalAux","minimum","minimumAux","maximum","maximumAux","height","heightAux","cmp","leftCh","rightCh","transplant","parent","y","signal","queue","Math","max","position","__extends","extendStatics","setPrototypeOf","__proto__","Array","p","__","constructor","create","BSTree_1","BSTree","_super","apply","arguments","Heap_1","collections","Heap","data","leftChildIndex","nodeIndex","rightChildIndex","parentIndex","floor","minIndex","leftChild","rightChild","siftUp","swap","siftDown","min","removeRoot","equF","compareToEquals","LinkedDictionary_1","LinkedDictionaryPair","unlink","HeadOrTailLinkedDictionaryPair","LinkedDictionary","_this","head","tail","appendToTail","entry","getLinkedDictionaryPair","replace","oldPair","newPair","existingPair","crawlNode","MultiDictionary_1","MultiDictionary","valuesEqualsFunction","allowDuplicateValues","dict","allowDuplicate","copy","_a","v_1","w","FactoryDictionary_1","FactoryDictionary","defaultFactoryFunction","setDefault","defaultValue","currentValue","PriorityQueue_1","PriorityQueue","heap","reverseCompareFunction","Stack_1","Stack","pop","Direction","MultiRootTree_1","MultiRootTree","rootIds","nodes","initRootIds","initNodes","rootId","createEmptyNodeIfNotExist","nodeKey","nodeListItem","getRootIds","slice","getNodes","clone","getObject","toObject","flatten","extraPropsObject","id","level","hasParent","childrenCount","traverse","extraPropsObject_1","o","countChildren","startId","returnArray","idsList","moveIdBeforeId","moveId","beforeId","BEFORE","moveIdAfterId","afterId","AFTER","moveIdIntoId","insideId","atStart","INSIDE_AT_START","INSIDE_AT_END","swapRootIdWithRootId","withRootId","leftIndex","findRootId","rightIndex","swapRootPositionWithRootPosition","swapRootPosition","withRootPosition","deleteId","rootDeleteId","nodeAndSubNodesDelete","nodeRefrencesDelete","insertIdBeforeId","insertId","foundRootIdIndex","insertIdIntoRoot","foundNodeIdIndex","findNodeId","insertIdIntoNode","insertIdAfterId","belowId","insertIdIntoId","nodeInsertAtEnd","rootInsertAtEnd","length_1","length_2","direction","sourceId","sourceRootIndex","targetId","targetRootIndex","rootDelete","nodeInsertAtStart","nodeDeleteAtIndex","swapArrayElements","arr","indexA","indexB","toDeleteLater","nodeDelete","findNode","unshift","rootInsertAtStart","lib","_arrays","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","FactoryDictionary_2","require$$10","require$$11","require$$12","require$$13","require$$14","_util","require$$15","module","$$type","type","x","f","__doctest","require","List","Maybe","Nil","Cons","Nothing","Just","concat_","xs","ys","constant","forEachKey","strMap","identity","sameType","thrush","iterationNext","done","iterationDone","TypeClass","name","url","dependencies","test","every","Constructor","Value","_funcPath","allowInheritedProps","path","_x","idx","funcPath","implPath","implementations","functionName","match","exec","$","_name","requirements","getBoundMethod","typeRep","m","bind","version","typeClass","arg","methods","reduce","Setoid","Ord","lte","Semigroupoid","compose","Category","Semigroup","Monoid","empty","Group","invert","Filterable","filter","Functor","map","Bifunctor","bimap","Profunctor","promap","Apply","ap","Applicative","of","Chain","chain","ChainRec","chainRec","Monad","Alt","alt","Plus","zero","Alternative","Foldable","Traversable","Extend","extend","Comonad","extract","Contravariant","contramap","Null$prototype$equals","Null$prototype$lte","Undefined$prototype$equals","Undefined$prototype$lte","Boolean$prototype$equals","valueOf","Boolean$prototype$lte","Number$prototype$equals","isNaN","Number$prototype$lte","Date$prototype$equals","Date$prototype$lte","RegExp$prototype$equals","source","global","ignoreCase","multiline","sticky","unicode","String$empty","String$prototype$equals","String$prototype$lte","String$prototype$concat","Array$empty","Array$of","Array$chainRec","result","nil","todo","more","steps","step","Array$zero","Array$prototype$equals","Array$prototype$lte","Array$prototype$concat","Array$prototype$filter","pred","Array$prototype$map","Array$prototype$ap","fs","idx2","Array$prototype$chain","Array$prototype$reduce","initial","acc","Array$prototype$traverse","go","n","lift2","Array$prototype$extend","_","Arguments$prototype$equals","Arguments$prototype$lte","Error$prototype$equals","message","Object$empty","Object$zero","Object$prototype$equals","self","sort","Object$prototype$lte","theseKeys","otherKeys","shift","z","Object$prototype$concat","assign","Object$prototype$filter","Object$prototype$map","Object$prototype$ap","Object$prototype$reduce","reducer","Object$prototype$traverse","applicative","singleton","Function$id","Function$of","Function$chainRec","Function$prototype$equals","Function$prototype$compose","semigroupoid","Function$prototype$map","functor","Function$prototype$promap","g","profunctor","Function$prototype$ap","Function$prototype$chain","Function$prototype$extend","Function$prototype$contramap","contravariant","$pairs","Null","Undefined","Boolean","Number","Date","RegExp","String","Arguments","Error","Function","some","lt","gt","gte","group","filterable","reject","takeWhile","take","dropWhile","flip","bifunctor","mapLeft","applyF","applyX","lift3","apFirst","apSecond","append","prepend","chain_","foldable","isArray","foldMap","monoid","F","sortBy","rs","fx","lte_","r","traversable","sequence","extend_","duplicate","comonad","Entry","rank","action","seq","nextSeq","Transaction","inCallback","toRegen","prioritizedQ","entries","sampleQ","lastQ","postQ","requestRegen","prioritized","target","e","sample","h","_collectCyclesAtEnd","run","collectCyclesAtEnd","post","childIx","existing","neu","checkRegen","es","isActive","currentTransaction","close","sq","parent_1","err","onStart","onStartHooks","transWas","runningOnStartHooks","Vertex","collectCycles","totalRegistrations","Color","Source","origin","register_","registered","deregister_","register","increment","NULL","childrn","decrement","deregister","roots","nextID","sources","targets","visited","color","black","buffered","refCountAdj","refCount","incRefCount","anyChanged","ensureBiggerThan","decRefCount","matched","addSource","src","limit","descr","colStr","gray","white","purple","str","chs","children","referrer","release","possibleRoots","free","collectingCycles","markRoots","scanRoots","collectRoots","toBeFreedList","newRoots","markGray","scan","collectWhite","scanBlack","Lambda1","deps","Lambda1_deps","Lambda1_toFunction","Lambda2","Lambda2_deps","Lambda2_toFunction","Lambda3","Lambda3_deps","Lambda3_toFunction","Lambda4","Lambda4_deps","Lambda4_toFunction","Lambda5","Lambda5_deps","Lambda5_toFunction","Lambda6","Lambda6_deps","Lambda6_toFunction","toSources","ss","dep","getVertex__","Lazy","get","lift","c","lift4","Unit","UNIT","Operational","updates","getStream__","sSpark","StreamWithSend","send_","sInitial","snapshot1","orElse","defer","s","split","out","setVertex__","cleanups","listen_","as","_loop_1","cleanup","Tuple2","LazySample","cell","hasValue","ApplyState","f_present","a_present","Cell","initValue","setStream","Stream","vertex","me","valueUpdate","lazyInitValue","tmpVertexNULL","sampleNoTrans__","sampleLazy","sampleLazyNoTrans__","holdLazy","fn0","fn","cf","aa","bb","cc","dd","lift5","ee","lift6","ff","tracking","extractor","cleanup2","updateDeps","lastCleanups2","cleanup1","liftArray","ca","_liftArray","fromInc","toExc","pivot","pumping","state","cf_updates","ca_updates","pump","src1","src2","switchC","cca","za","ba","outValue","last_ca","cca_value","kill2","kill1","nextKill2","switchS","csa","h2","sa","calm","eq","collectLazy","newValue","oldValue","filterNotNull","calmRefEq","listen","Listener","LazyCell","MergeState","left","left_present","right","right_present","listeners","firings","mapTo","merge","mergeState","gate","snapshot","f_","snapshot3","snapshot4","snapshot5","snapshot6","hold","collect","initState","ea","StreamLoop","ebs","eb","bs","es_out","loop","accum","accumLazy","once","suppressEarlierFirings","listener","firings_1","removed","assigned__","sa_out","CoalesceHandler","accumValid","StreamSink","disableListenCheck","l","coalescer","send","CellLoop","a_out","CellSink","Router","inStream","selector","keyToStr","_inStream","_table","_vertex","ks","outs","outs2","filterMatches","TimerSystemImpl","Event","t","sAlarm","TimerSystem","impl","eventQueue","tMinimum","timeSnk","now","time","ev","mev","at","tAlarm","cancelCurrent","active","tAl","sampled","updateTimer","setTimer","kill","oAlarm","SecondsTimerSystem","SecondsTimerSystemImpl","timeout","setTimeout","clearTimeout","MillisecondsTimerSystem","MillisecondsTimerSystemImpl","IOAction","fromAsync","performIO","jsxmlComponent","nest","migrate","isAncestorOf","that","ctx","jsxmlAttr","old_source","super","prevValue","accept","visitor","visitAttr","jsxmlAttributes","elm","prevValues","visitAttributes","jsxmlNode","ref","reference","nodeType","DOCUMENT_FRAGMENT_NODE","firstChild","lastChild","visitNode","jsxmlVisitor","_binding","Map","context","_lineage","visitCell","deepSample","_updates","requestAnimationFrame","q","garbageCollect","from","delete","buildNode","appendChild","Comment","Node","Text","buildElement","tag","find","attrs","ownerDocument","createElement","df","createDocumentFragment","childNodes","isConnected","Range","setStartBefore","setEndAfter","endOffset","setStart","startContainer","startOffset","deleteContents","parentNode","insertBefore","nextSibling","removeChild","replaceChild","attr","validateEventListenable","removeEventListener","addEventListener","removeAttribute","setAttribute","className","detach","handleEvent","jshtmlInlineStyleRule","cssprop","visitStyle","jshtmlDatasetValue","dataname","visitDataset","jshtmlVisitor","HTMLTemplateElement","content","cloneNode","HTMLElement","style","dataset","hyphenSeparatedToCamelize","charAt","toUpperCase","jsxml","wrap","_mount","visitorConstructor","mount","mountAsContents","hasChildNodes","appendTo","prependTo","jshtml","mountAsShadow","init","shadowRoot","attachShadow","mode","mutations","sink","MutationObserver","observe","proxy_handler","Proxy","_jsxml","_jshtml","sAttrChanges","attributes","attributeFilter","Reflect","attributeName","getAttribute","hasAttribute"],"mappings":"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"}